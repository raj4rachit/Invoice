{"version":3,"file":"static/js/1520.3251d740.chunk.js","mappings":"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","sources":["apis/Reports.js","views/reports/clientReport/ReportPage.jsx","views/reports/clientReport/GenerateForm.jsx","views/reports/clientReport/index.jsx","../node_modules/@mui/icons-material/FileUploadOutlined.js","../node_modules/@mui/icons-material/esm/AddCircleOutlineOutlined.js","../node_modules/@mui/material/TableHead/tableHeadClasses.js","../node_modules/@mui/material/TableHead/TableHead.js"],"sourcesContent":["import {\r\n    ClientStatement,\r\n    ExpenseStatement,\r\n    IncomeStatement,\r\n    InitClients,\r\n    InitIncomeStatement,\r\n    InitReport,\r\n    ProfitLossReport,\r\n    YOYReport\r\n} from 'store/ApiConstant';\r\nimport { AxiosAuthServices } from './axios/axiosServices';\r\n\r\nexport function InitReportApi() {\r\n    return AxiosAuthServices.get(InitReport);\r\n}\r\nexport function ProfitLossReportApi(data) {\r\n    const formData = new FormData();\r\n    formData.append('company_id', data.company_id);\r\n    formData.append('start_date', data.start_date);\r\n    formData.append('end_date', data.end_date);\r\n    formData.append('type', data.type);\r\n    return AxiosAuthServices.post(ProfitLossReport, formData);\r\n}\r\n\r\n// Income Statement\r\nexport function InitIncomeStatementApi() {\r\n    return AxiosAuthServices.get(InitIncomeStatement);\r\n}\r\n\r\n// Client List\r\nexport function InitClientsApi() {\r\n    return AxiosAuthServices.get(InitClients);\r\n}\r\n\r\nexport function IncomeStatementApi(data) {\r\n    const formData = new FormData();\r\n    formData.append('company_id', data.company_id);\r\n    formData.append('start_date', data.start_date);\r\n    formData.append('end_date', data.end_date);\r\n    formData.append('type', data.type);\r\n    return AxiosAuthServices.post(IncomeStatement, formData);\r\n}\r\n\r\nexport function ExpenseStatementApi(data) {\r\n    const formData = new FormData();\r\n    formData.append('company_id', data.company_id);\r\n    formData.append('start_date', data.start_date);\r\n    formData.append('end_date', data.end_date);\r\n    formData.append('type', data.type);\r\n    return AxiosAuthServices.post(ExpenseStatement, formData);\r\n}\r\n\r\nexport function ClientStatementApi(data) {\r\n    const formData = new FormData();\r\n    formData.append('client_id', data.client_id);\r\n    formData.append('start_date', data.start_date);\r\n    formData.append('end_date', data.end_date);\r\n    formData.append('type', data.type);\r\n    return AxiosAuthServices.post(ClientStatement, formData);\r\n}\r\n\r\nexport function YOYReportApi(data) {\r\n    const formData = new FormData();\r\n    formData.append('company_id', data.company_id);\r\n    formData.append('type', data.type);\r\n    data.financial_years.map((i) => {\r\n        data.type ? formData.append('years[]', i) : formData.append('years[]', i.year_id);\r\n    });\r\n    return AxiosAuthServices.post(YOYReport, formData);\r\n}\r\n","import { Table, TableBody, TableCell, tableCellClasses, TableContainer, TableHead, TableRow, Typography } from '@mui/material';\r\nimport propTypes from 'prop-types';\r\nimport moment from 'moment';\r\nimport { Fragment } from 'react';\r\n\r\nconst ReportPage = ({ reportData }) => {\r\n    const columnCount = 3;\r\n    const ClientData = reportData.clientInvoiceData;\r\n    return (\r\n        <TableContainer>\r\n            <Table\r\n                sx={{\r\n                    [`& .${tableCellClasses.root}`]: {\r\n                        borderBottom: 'none'\r\n                    }\r\n                }}\r\n            >\r\n                <TableHead>\r\n                    {reportData.client_id === '0' ? (\r\n                        <TableRow>\r\n                            <TableCell align=\"center\">\r\n                                <Typography variant=\"h2\">All Clients</Typography>\r\n                            </TableCell>\r\n                        </TableRow>\r\n                    ) : (\r\n                        <TableRow>\r\n                            <TableCell align=\"center\">\r\n                                {ClientData.map((iSub, idx) => (\r\n                                    <Fragment key={idx}>\r\n                                        <Typography key={idx} variant=\"h2\">\r\n                                            {iSub.client_company_name}\r\n                                        </Typography>\r\n                                        <Typography variant=\"inherit\">{iSub.client_name}</Typography>\r\n                                    </Fragment>\r\n                                ))}\r\n                            </TableCell>\r\n                        </TableRow>\r\n                    )}\r\n                    <TableRow>\r\n                        <TableCell align=\"center\">\r\n                            <Typography variant=\"h3\">Client Report</Typography>\r\n                            <Typography variant=\"h4\">\r\n                                For the period ended\r\n                                {` ${moment(reportData.start_date).format('DD-MMM, YYYY')} To ${moment(reportData.end_date).format(\r\n                                    'DD-MMM, YYYY'\r\n                                )}`}\r\n                            </Typography>\r\n                        </TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n            </Table>\r\n\r\n            <Table\r\n                size=\"small\"\r\n                sx={{\r\n                    marginTop: 5,\r\n                    [`& .${tableCellClasses.root}`]: {\r\n                        borderLeft: '1px solid',\r\n                        borderRight: '1px solid',\r\n                        borderTop: '1px solid',\r\n                        borderBottom: '1px solid'\r\n                    }\r\n                }}\r\n            >\r\n                <TableHead\r\n                    sx={{\r\n                        backgroundColor: 'lightblue'\r\n                    }}\r\n                >\r\n                    <TableRow>\r\n                        <TableCell sx={{ width: '60%' }} colSpan={columnCount}>\r\n                            <Typography variant=\"h4\">Clients</Typography>\r\n                        </TableCell>\r\n                        <TableCell sx={{ width: '20%' }} align=\"center\">\r\n                            <Typography variant=\"h4\">({reportData.Subscriber_currency_symbol})</Typography>\r\n                        </TableCell>\r\n                        <TableCell sx={{ width: '20%' }} align=\"center\">\r\n                            <Typography variant=\"h4\">({reportData.USD_symbol})</Typography>\r\n                        </TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {ClientData.map((iSub) => {\r\n                        const companies = iSub.companies;\r\n                        return companies.map((iCom, cidx) => {\r\n                            const invoices = iCom.invoices;\r\n                            return invoices.map((iE, idx) => (\r\n                                <TableRow key={idx}>\r\n                                    {cidx === 0 && idx === 0 && (\r\n                                        <TableCell rowSpan={iSub.count}>\r\n                                            {iSub.client_company_name + ' - ' + iSub.client_name}{' '}\r\n                                            <Typography variant=\"subtitle2\" mt={1}>\r\n                                                <b>\r\n                                                    {iSub.subscriber_amount} | {iSub.usd_amount}\r\n                                                </b>\r\n                                            </Typography>\r\n                                        </TableCell>\r\n                                    )}\r\n                                    {idx === 0 && (\r\n                                        <TableCell rowSpan={iCom.count}>\r\n                                            {iCom.company_name}\r\n                                            <Typography variant=\"subtitle2\" mt={1}>\r\n                                                <b>\r\n                                                    {iCom.subscriber_amount} | {iCom.usd_amount}\r\n                                                </b>\r\n                                            </Typography>\r\n                                        </TableCell>\r\n                                    )}\r\n                                    <TableCell>{iE.invoice_no}</TableCell>\r\n                                    <TableCell align=\"right\">{iE.subscriber_currency_total_amount}</TableCell>\r\n                                    <TableCell align=\"right\">{iE.USD_currency_total_amount}</TableCell>\r\n                                </TableRow>\r\n                            ));\r\n                        });\r\n                    })}\r\n                    <TableRow\r\n                        sx={{\r\n                            backgroundColor: 'lightgreen'\r\n                        }}\r\n                    >\r\n                        <TableCell colSpan={columnCount}>\r\n                            <Typography variant=\"subtitle1\">Total</Typography>\r\n                        </TableCell>\r\n                        <TableCell align=\"right\">\r\n                            <Typography variant=\"subtitle1\">{reportData.total_subscriber_currency}</Typography>\r\n                        </TableCell>\r\n                        <TableCell align=\"right\">\r\n                            <Typography variant=\"subtitle1\">{reportData.total_USD}</Typography>\r\n                        </TableCell>\r\n                    </TableRow>\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    );\r\n};\r\nReportPage.propTypes = {\r\n    reportData: propTypes.object\r\n};\r\n\r\nexport default ReportPage;\r\n","import propTypes from 'prop-types';\r\nimport { Grid, MenuItem, TextField } from '@mui/material';\r\nimport { DesktopDatePicker, LocalizationProvider } from '@mui/x-date-pickers';\r\nimport { AdapterMoment } from '@mui/x-date-pickers/AdapterMoment';\r\nimport { useFormik } from 'formik';\r\nimport moment from 'moment';\r\nimport { ClientStatementApi, IncomeStatementApi } from 'apis/Reports';\r\nimport { apiErrorSnackBar } from 'utils/SnackBar';\r\nimport useAuth from 'hooks/useAuth';\r\n\r\nconst GenerateForm = ({ value, formID, initData, setReportData, onSubmit }) => {\r\n    const { company } = useAuth();\r\n    const initialData = initData ?? false;\r\n    const initValue = Object.keys(value).length > 0 ? value : false;\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            client_id: initValue ? initValue.client_id : '0',\r\n            start_date: initValue ? moment(initValue.start_date) : moment(company.start_date),\r\n            end_date: initValue ? moment(initValue.end_date) : moment(company.end_date)\r\n        },\r\n        onSubmit: (values) => {\r\n            values.start_date = moment(values.start_date).format('YYYY-MM-DD');\r\n            values.end_date = moment(values.end_date).format('YYYY-MM-DD');\r\n\r\n            ClientStatementApi(values)\r\n                .then((res) => {\r\n                    if (onSubmit) onSubmit();\r\n                    setReportData(res.data.data);\r\n                })\r\n                .catch((err) => {\r\n                    apiErrorSnackBar(err);\r\n                });\r\n        }\r\n    });\r\n\r\n    return (\r\n        <form id={formID} onSubmit={formik.handleSubmit}>\r\n            <Grid container spacing={2}>\r\n                <LocalizationProvider dateAdapter={AdapterMoment} localeText={{ start: 'Start Date', end: 'From Date' }}>\r\n                    <Grid item xs={12}>\r\n                        <DesktopDatePicker\r\n                            id=\"start_date\"\r\n                            name=\"start_date\"\r\n                            label=\"Start Date\"\r\n                            inputFormat=\"YYYY-MM-DD\"\r\n                            value={formik.values.start_date}\r\n                            onChange={(newValue) => {\r\n                                formik.setFieldValue('start_date', moment(newValue));\r\n                            }}\r\n                            renderInput={(params) => <TextField fullWidth size=\"small\" {...params} />}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <DesktopDatePicker\r\n                            id=\"end_date\"\r\n                            name=\"end_date\"\r\n                            label=\"End date\"\r\n                            inputFormat=\"YYYY-MM-DD\"\r\n                            value={formik.values.end_date}\r\n                            onChange={(newValue) => {\r\n                                formik.setFieldValue('end_date', moment(newValue));\r\n                            }}\r\n                            renderInput={(params) => <TextField fullWidth size=\"small\" {...params} />}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            select\r\n                            size=\"small\"\r\n                            label=\"Company\"\r\n                            fullWidth\r\n                            id=\"client_id\"\r\n                            name=\"client_id\"\r\n                            value={formik.values.client_id}\r\n                            onChange={formik.handleChange}\r\n                            error={formik.touched.client_id && Boolean(formik.errors.client_id)}\r\n                            helperText={formik.touched.client_id && formik.errors.client_id}\r\n                        >\r\n                            <MenuItem key={-1} value={0}>\r\n                                All Clients\r\n                            </MenuItem>\r\n                            {initialData &&\r\n                                initialData.map((i, idx) => (\r\n                                    <MenuItem key={idx} value={i.id}>\r\n                                        {i.company_name}\r\n                                    </MenuItem>\r\n                                ))}\r\n                        </TextField>\r\n                    </Grid>\r\n                </LocalizationProvider>\r\n            </Grid>\r\n        </form>\r\n    );\r\n};\r\n\r\n// ========== PropTypes ========== //\r\n\r\nGenerateForm.propTypes = {\r\n    value: propTypes.object,\r\n    formID: propTypes.string.isRequired,\r\n    initData: propTypes.array,\r\n    setReportData: propTypes.func,\r\n    onSubmit: propTypes.func\r\n};\r\n\r\nexport default GenerateForm;\r\n","import { useEffect } from 'react';\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport { Box, Button, Grid, Typography } from '@mui/material';\r\nimport { gridSpacing } from 'store/constant';\r\nimport { useState } from 'react';\r\nimport { AddCircleOutlineOutlined } from '@mui/icons-material';\r\nimport ReportPage from './ReportPage';\r\nimport { ClientStatementApi, InitClientsApi } from 'apis/Reports';\r\nimport { apiErrorSnackBar } from 'utils/SnackBar';\r\nimport CenterDialog from 'views/utilities/CenterDialog';\r\nimport GenerateForm from './GenerateForm';\r\nimport useAuth from 'hooks/useAuth';\r\nimport moment from 'moment';\r\nimport FileUploadOutlinedIcon from '@mui/icons-material/FileUploadOutlined';\r\n\r\nconst Index = () => {\r\n    const { company, recall } = useAuth();\r\n    const [openGenerate, setOpenGenerate] = useState(false);\r\n    const [reportData, setReportData] = useState({});\r\n    const [initData, setInitData] = useState([]);\r\n\r\n    const generateReport = () => {\r\n        setOpenGenerate((prevState) => !prevState);\r\n    };\r\n\r\n    const generateExportReport = () => {\r\n        const values = {\r\n            client_id: reportData.client_id,\r\n            start_date: moment(reportData.start_date).format('YYYY-MM-DD'),\r\n            end_date: moment(reportData.end_date).format('YYYY-MM-DD'),\r\n            type: 'report'\r\n        };\r\n\r\n        ClientStatementApi(values)\r\n            .then((res) => {\r\n                const a = document.createElement('a');\r\n                a.href = res.data.data.client_report;\r\n                a.download = res.data.data.client_report_name;\r\n                a.click();\r\n            })\r\n            .catch((err) => {\r\n                console.error(err);\r\n            });\r\n    };\r\n\r\n    const submitHandler = () => {\r\n        setOpenGenerate((prevState) => !prevState);\r\n    };\r\n\r\n    useEffect(() => {\r\n        const values = {\r\n            client_id: '0',\r\n            start_date: moment(company.start_date).format('YYYY-MM-DD'),\r\n            end_date: moment(company.end_date).format('YYYY-MM-DD')\r\n        };\r\n\r\n        ClientStatementApi(values)\r\n            .then((res) => {\r\n                setReportData(res.data.data);\r\n            })\r\n            .catch((err) => {\r\n                apiErrorSnackBar(err);\r\n            });\r\n    }, [recall]);\r\n\r\n    useEffect(() => {\r\n        InitClientsApi()\r\n            .then((res) => {\r\n                setInitData(res.data.data);\r\n            })\r\n            .catch(() => {\r\n                apiErrorSnackBar(err);\r\n            });\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <MainCard\r\n                title={\r\n                    <Grid container alignItems=\"center\" spacing={gridSpacing} sx={{ mb: -1, mt: -3 }}>\r\n                        <Grid item xs={12}>\r\n                            <Grid container alignItems=\"center\" spacing={gridSpacing}>\r\n                                <Grid item sx={{ flexGrow: 1 }}>\r\n                                    <Typography variant=\"column\">Client Report</Typography>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Button variant=\"outlined\" onClick={() => generateExportReport()}>\r\n                                        <FileUploadOutlinedIcon sx={{ mr: 0.5 }} /> Export\r\n                                    </Button>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Button variant=\"contained\" onClick={() => generateReport()}>\r\n                                        <AddCircleOutlineOutlined sx={{ mr: 0.5 }} /> Generate Report\r\n                                    </Button>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                }\r\n                content={true}\r\n            >\r\n                {Object.keys(reportData).length > 0 ? (\r\n                    <ReportPage reportData={reportData} />\r\n                ) : (\r\n                    <Box component=\"span\">\r\n                        <Typography\r\n                            variant=\"h2\"\r\n                            textAlign=\"center\"\r\n                            sx={{\r\n                                p: '10%'\r\n                            }}\r\n                            color=\"GrayText\"\r\n                        >\r\n                            Please Generate Report\r\n                        </Typography>\r\n                    </Box>\r\n                )}\r\n            </MainCard>\r\n            {openGenerate && (\r\n                <CenterDialog\r\n                    title={`Generate Income Statement Report`}\r\n                    open={openGenerate}\r\n                    onClose={() => setOpenGenerate((prevState) => !prevState)}\r\n                    id=\"generateForm\"\r\n                >\r\n                    <GenerateForm\r\n                        value={reportData}\r\n                        formID=\"generateForm\"\r\n                        initData={initData}\r\n                        setReportData={setReportData}\r\n                        onSubmit={submitHandler}\r\n                    />\r\n                </CenterDialog>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Index;\r\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M18 15v3H6v-3H4v3c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2v-3h-2zM7 9l1.41 1.41L11 7.83V16h2V7.83l2.59 2.58L17 9l-5-5-5 5z\"\n}), 'FileUploadOutlined');\n\nexports.default = _default;","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M13 7h-2v4H7v2h4v4h2v-4h4v-2h-4V7zm-1-5C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z\"\n}), 'AddCircleOutlineOutlined');","import { generateUtilityClass, generateUtilityClasses } from '@mui/base';\nexport function getTableHeadUtilityClass(slot) {\n  return generateUtilityClass('MuiTableHead', slot);\n}\nconst tableHeadClasses = generateUtilityClasses('MuiTableHead', ['root']);\nexport default tableHeadClasses;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"component\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport Tablelvl2Context from '../Table/Tablelvl2Context';\nimport useThemeProps from '../styles/useThemeProps';\nimport styled from '../styles/styled';\nimport { getTableHeadUtilityClass } from './tableHeadClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getTableHeadUtilityClass, classes);\n};\n\nconst TableHeadRoot = styled('thead', {\n  name: 'MuiTableHead',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})({\n  display: 'table-header-group'\n});\nconst tablelvl2 = {\n  variant: 'head'\n};\nconst defaultComponent = 'thead';\nconst TableHead = /*#__PURE__*/React.forwardRef(function TableHead(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiTableHead'\n  });\n\n  const {\n    className,\n    component = defaultComponent\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const ownerState = _extends({}, props, {\n    component\n  });\n\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(Tablelvl2Context.Provider, {\n    value: tablelvl2,\n    children: /*#__PURE__*/_jsx(TableHeadRoot, _extends({\n      as: component,\n      className: clsx(classes.root, className),\n      ref: ref,\n      role: component === defaultComponent ? null : 'rowgroup',\n      ownerState: ownerState\n    }, other))\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? TableHead.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component, normally `TableRow`.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default TableHead;"],"names":["InitReportApi","AxiosAuthServices","InitReport","ProfitLossReportApi","data","formData","FormData","append","company_id","start_date","end_date","type","ProfitLossReport","InitIncomeStatementApi","InitIncomeStatement","InitClientsApi","InitClients","IncomeStatementApi","IncomeStatement","ExpenseStatementApi","ExpenseStatement","ClientStatementApi","client_id","ClientStatement","YOYReportApi","financial_years","map","i","year_id","YOYReport","reportData","ClientData","clientInvoiceData","TableContainer","Table","sx","tableCellClasses","borderBottom","TableHead","TableRow","TableCell","align","Typography","variant","iSub","idx","Fragment","client_company_name","client_name","moment","format","size","marginTop","borderLeft","borderRight","borderTop","backgroundColor","width","colSpan","Subscriber_currency_symbol","USD_symbol","TableBody","companies","iCom","cidx","invoices","iE","rowSpan","count","mt","subscriber_amount","usd_amount","company_name","invoice_no","subscriber_currency_total_amount","USD_currency_total_amount","total_subscriber_currency","total_USD","value","formID","initData","setReportData","onSubmit","company","useAuth","initialData","initValue","Object","keys","length","formik","useFormik","initialValues","values","then","res","catch","err","apiErrorSnackBar","id","handleSubmit","Grid","container","spacing","LocalizationProvider","dateAdapter","AdapterMoment","localeText","start","end","item","xs","DesktopDatePicker","name","label","inputFormat","onChange","newValue","setFieldValue","renderInput","params","TextField","fullWidth","select","handleChange","error","touched","Boolean","errors","helperText","MenuItem","recall","openGenerate","setOpenGenerate","useState","setInitData","useEffect","MainCard","title","alignItems","gridSpacing","mb","flexGrow","Button","onClick","a","document","createElement","href","client_report","download","client_report_name","click","console","generateExportReport","FileUploadOutlined","mr","prevState","AddCircleOutlineOutlined","content","Box","component","textAlign","p","color","CenterDialog","open","onClose","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d","createSvgIcon","_jsx","getTableHeadUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","TableHeadRoot","styled","overridesResolver","props","styles","root","display","tablelvl2","defaultComponent","React","inProps","ref","useThemeProps","className","other","_objectWithoutPropertiesLoose","ownerState","_extends","classes","composeClasses","useUtilityClasses","Tablelvl2Context","children","as","clsx","role"],"sourceRoot":""}