{"version":3,"file":"static/js/157.a7ca7e42.chunk.js","mappings":"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","sources":["views/invoice/AddEditItem.jsx","../node_modules/@mui/icons-material/esm/EditOutlined.js","../node_modules/@mui/icons-material/esm/ContentCopyOutlined.js","views/invoice/AddEditInvoice.jsx","../node_modules/@mui/icons-material/esm/TableChartOutlined.js","views/invoice/invoiceCard/CardSkeleton.jsx","views/invoice/invoiceCard/PrimaryDarkCard.jsx","views/invoice/invoiceCard/SecondaryDarkCard.jsx","../node_modules/@mui/material/TableFooter/tableFooterClasses.js","../node_modules/@mui/material/TableFooter/TableFooter.js","views/invoice/payment/AddEditPayment.jsx","views/invoice/payment/PaymentList.jsx","views/invoice/payment/index.jsx","../node_modules/@mui/icons-material/esm/GetAppOutlined.js","views/invoice/attachment/index.jsx","../node_modules/@mui/icons-material/esm/SimCardDownloadOutlined.js","views/utilities/TitlePopper.jsx","views/invoice/InvoiceList.jsx","views/invoice/index.jsx","views/utilities/DeleteDialog.jsx","../node_modules/@mui/icons-material/esm/Edit.js","../node_modules/@mui/icons-material/esm/FilterAlt.js","../node_modules/@mui/system/esm/Box/Box.js"],"sourcesContent":["import { FormControl, FormHelperText, Grid, InputLabel, MenuItem, Select, TextField } from '@mui/material';\r\nimport { DesktopDatePicker, LocalizationProvider } from '@mui/x-date-pickers';\r\nimport { AdapterMoment } from '@mui/x-date-pickers/AdapterMoment';\r\nimport { useFormik } from 'formik';\r\nimport moment from 'moment';\r\nimport { useState } from 'react';\r\nimport { useCallback, useEffect } from 'react';\r\nimport Required from 'views/utilities/Required';\r\n\r\nimport * as yup from 'yup';\r\n\r\nconst validationSchema = yup.object().shape({\r\n    item_type: yup.string().required('Item type is required.'),\r\n    item_resource_name: yup.string().required('Resource name is required.'),\r\n    item_qty: yup.string().required('Resource / Hours is required.')\r\n});\r\n\r\nconst initFormValue = {\r\n    item_type: 0,\r\n    isDate: false,\r\n    item_resource_name: '',\r\n    item_start_date: moment().format('YYYY-MM-DD'),\r\n    item_end_date: moment().format('YYYY-MM-DD'),\r\n    item_actual_days: 1,\r\n    item_working_days: 1,\r\n    item_qty: 0,\r\n    item_rate: 0,\r\n    item_deduction: 0,\r\n    item_tax_amount: 0,\r\n    item_discount: 0,\r\n    item_discount_amount: 0,\r\n    item_subtotal: 0,\r\n    item_amount: 0\r\n};\r\n\r\nexport const AddEditItem = ({ value, formId, onSubmit, initData, setItemData, itemData, listingData }) => {\r\n    const initValue = value ?? false;\r\n    const [isDate, setIsDate] = useState(false);\r\n\r\n    const totalTaxSum = () => {\r\n        let totalTax = 0;\r\n        initData.tax_id.map((i) => {\r\n            totalTax += +i.rate;\r\n        });\r\n        return totalTax;\r\n    };\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            index: initValue ? initValue.index : '',\r\n            id: initValue ? initValue.id : '',\r\n            bifurcated_client: initValue ? initValue.bifurcated_client : '',\r\n            item_type: initValue ? initValue.item_type : '',\r\n            item_resource_name: initValue ? initValue.item_resource_name : '',\r\n            item_start_date: initValue ? initValue.item_start_date : moment().format('YYYY-MM-DD'),\r\n            item_end_date: initValue ? initValue.item_end_date : moment().format('YYYY-MM-DD'),\r\n            item_actual_days: initValue ? initValue.item_actual_days : '1',\r\n            item_working_days: initValue ? initValue.item_working_days : '1',\r\n            item_qty: initValue ? initValue.item_qty : '0',\r\n            item_rate: initValue ? initValue.item_rate : '0',\r\n            item_deduction: initValue ? initValue.item_deduction : '0',\r\n            item_tax_amount: initValue ? initValue.item_tax_amount : '0',\r\n            item_discount: initValue ? initValue.item_discount : '0',\r\n            item_discount_amount: initValue ? initValue.item_discount_amount : '0',\r\n            item_subtotal: initValue ? initValue.item_subtotal : '0',\r\n            item_amount: initValue ? initValue.item_amount : '0',\r\n            item_description: initValue ? initValue.item_description : ''\r\n        },\r\n        validationSchema: validationSchema,\r\n        onSubmit: (values) => {\r\n            if (values.index !== '') {\r\n                itemData[values.index] = values;\r\n            } else {\r\n                setItemData([...itemData, values]);\r\n            }\r\n            if (onSubmit) onSubmit();\r\n        }\r\n    });\r\n\r\n    /********************************************************************************\r\n     * ======================= Calculate Total amount and tax =======================\r\n     ********************************************************************************/\r\n    const changeAmount = useCallback(() => {\r\n        const qty = initFormValue.item_qty;\r\n        const rate = initFormValue.item_rate;\r\n        const actualDays = initFormValue.item_actual_days;\r\n        const workingDays = initFormValue.item_working_days;\r\n        const deduction = initFormValue.item_deduction;\r\n        const discount = initFormValue.item_discount;\r\n        const totalRate = qty * rate;\r\n\r\n        let totalWorkingDayAmount = (workingDays * totalRate) / actualDays - deduction;\r\n        let totalTax = 0;\r\n        let subtotal = 0;\r\n        let totalAmount = 0;\r\n\r\n        // Discount Calculation\r\n        const discountType = initData.discount_type;\r\n        let discountAmount = 0;\r\n\r\n        if (discountType === 'AFTER_TAX_PR' || discountType === 'AFTER_TAX_FLAT') {\r\n            totalTax = (totalWorkingDayAmount * totalTaxSum()) / 100;\r\n            discountAmount = discountType === 'AFTER_TAX_PR' ? ((totalWorkingDayAmount + totalTax) * discount) / 100 : discount;\r\n            discountAmount = Number(discountAmount).toFixed(2);\r\n            subtotal = totalWorkingDayAmount;\r\n            totalAmount = totalWorkingDayAmount + totalTax - discountAmount;\r\n        } else if (discountType === 'BEFORE_TAX_PR' || discountType === 'BEFORE_TAX_FLAT') {\r\n            discountAmount = discountType === 'BEFORE_TAX_PR' ? (totalWorkingDayAmount * discount) / 100 : totalWorkingDayAmount + discount;\r\n            totalWorkingDayAmount = totalWorkingDayAmount - discountAmount;\r\n            totalTax = (totalWorkingDayAmount * totalTaxSum()) / 100;\r\n            subtotal = totalWorkingDayAmount;\r\n            totalAmount = totalWorkingDayAmount + totalTax;\r\n        } else {\r\n            totalTax = (totalWorkingDayAmount * totalTaxSum()) / 100;\r\n            subtotal = totalWorkingDayAmount;\r\n            totalAmount = totalWorkingDayAmount + totalTax;\r\n        }\r\n\r\n        initFormValue.item_tax_amount = totalTax.toFixed(2);\r\n        initFormValue.item_discount_amount = discountAmount;\r\n        initFormValue.item_subtotal = subtotal.toFixed(2);\r\n        initFormValue.item_amount = totalAmount.toFixed(2);\r\n        formik.setFieldValue('item_tax_amount', totalTax.toFixed(2));\r\n        formik.setFieldValue('item_discount_amount', discountAmount);\r\n        formik.setFieldValue('item_subtotal', subtotal.toFixed(2));\r\n        formik.setFieldValue('item_amount', totalAmount.toFixed(2));\r\n\r\n        const itemTypeId = listingData.invoiceItemTypeList.findIndex((i) => i.id === initFormValue.item_type);\r\n        const itemType = listingData.invoiceItemTypeList[itemTypeId];\r\n        let description = '';\r\n        if (initFormValue.isDate === true) {\r\n            description = `${itemTypeId != -1 ? itemType.item_type_name + ' |' : ''} ${initFormValue.item_start_date} to ${\r\n                initFormValue.item_end_date\r\n            } | Working Days ${initFormValue.item_working_days} Out Of ${initFormValue.item_actual_days} `;\r\n        }\r\n        formik.setFieldValue('item_description', description);\r\n    }, []);\r\n\r\n    /*******************************************************************************\r\n     * =============== Calculate Actual and working days on the date ===============\r\n     *******************************************************************************/\r\n    const checkChangeDate = () => {\r\n        const startDate = initFormValue.item_start_date;\r\n        const endDate = initFormValue.item_end_date;\r\n        let start_Date = moment(startDate);\r\n        let end_Date = moment(endDate);\r\n        let actualDays = end_Date.diff(start_Date, 'days') + 1;\r\n        let counter = 0;\r\n        if (actualDays > 0) {\r\n            const date = start_Date;\r\n            for (let i = 0; i < actualDays; i++) {\r\n                let check = date.day();\r\n                if (check == 0 || check == 6) {\r\n                } else {\r\n                    counter++; // It's a weekday so increase the counter\r\n                }\r\n                date.add('1', 'days');\r\n            }\r\n        }\r\n\r\n        initFormValue.item_actual_days = actualDays;\r\n        initFormValue.item_working_days = counter;\r\n        formik.setFieldValue('item_actual_days', actualDays);\r\n        formik.setFieldValue('item_working_days', counter);\r\n        changeAmount();\r\n    };\r\n\r\n    /********************************************************************************\r\n     * ========================== Item Type Change Handler ==========================\r\n     ********************************************************************************/\r\n    const changeTypeHandler = useCallback(() => {\r\n        const itemTypeId = listingData.invoiceItemTypeList.findIndex((i) => i.id === initFormValue.item_type);\r\n        const itemType = listingData.invoiceItemTypeList[itemTypeId];\r\n        setIsDate(itemType.is_date === 'Yes' ? true : false);\r\n        initFormValue.isDate = itemType.is_date === 'Yes' ? true : false;\r\n        const startDate = initFormValue.item_start_date;\r\n        let endDate = moment(startDate).format('YYYY-MM-DD');\r\n        if (itemType.is_date === 'Yes') {\r\n            endDate = moment(startDate).add(itemType.date_no, itemType.date_type);\r\n            if (itemType.date_type === 'months' || itemType.date_type === 'years') {\r\n                endDate = moment(endDate).subtract('1', 'day');\r\n            }\r\n            endDate = endDate.format('YYYY-MM-DD');\r\n        }\r\n\r\n        // Update Formik value\r\n        initFormValue.item_end_date = endDate;\r\n        formik.setFieldValue('item_end_date', endDate);\r\n\r\n        let start_Date = moment(startDate);\r\n        let end_Date = moment(endDate);\r\n        let actualDays = end_Date.diff(start_Date, 'days');\r\n        if (itemType.is_date !== 'Yes') {\r\n            actualDays += 1;\r\n        }\r\n\r\n        let counter = 0;\r\n        if (actualDays > 0) {\r\n            const date = start_Date;\r\n            for (let i = 0; i < actualDays; i++) {\r\n                let check = date.day();\r\n                if (check == 0 || check == 6) {\r\n                } else {\r\n                    counter++; // It's a weekday so increase the counter\r\n                }\r\n                date.add('1', 'days');\r\n            }\r\n        }\r\n\r\n        initFormValue.item_actual_days = actualDays;\r\n        initFormValue.item_working_days = counter;\r\n        formik.setFieldValue('item_actual_days', actualDays);\r\n        formik.setFieldValue('item_working_days', counter);\r\n        changeAmount();\r\n        formik.setFieldValue('item_type', initFormValue.item_type);\r\n    }, []);\r\n\r\n    /*******************************************************************************\r\n     * ============================ Date Change Handler ============================\r\n     *******************************************************************************/\r\n    const changeDateHandler = (filedName, value) => {\r\n        formik.setFieldValue(filedName, value);\r\n        // setCheckChange((prevState) => !prevState);\r\n        checkChangeDate();\r\n    };\r\n\r\n    useEffect(() => {\r\n        initFormValue.item_type = initValue ? initValue.item_type : 0;\r\n        initFormValue.item_resource_name = initValue ? initValue.item_resource_name : '';\r\n        initFormValue.item_start_date = initValue ? moment(initValue.item_start_date).format('YYYY-MM-DD') : moment().format('YYYY-MM-DD');\r\n        initFormValue.item_end_date = initValue ? moment(initValue.item_end_date).format('YYYY-MM-DD') : moment().format('YYYY-MM-DD');\r\n        initFormValue.item_actual_days = initValue ? initValue.item_actual_days : 1;\r\n        initFormValue.item_working_days = initValue ? initValue.item_working_days : 1;\r\n        initFormValue.item_qty = initValue ? initValue.item_qty : 0;\r\n        initFormValue.item_rate = initValue ? initValue.item_rate : 0;\r\n        initFormValue.item_deduction = initValue ? initValue.item_deduction : 0;\r\n        initFormValue.item_tax_amount = initValue ? initValue.item_tax_amount : 0;\r\n        initFormValue.item_discount = initValue ? initValue.item_discount : 0;\r\n        initFormValue.item_discount_amount = initValue ? initValue.item_discount_amount : 0;\r\n        initFormValue.item_subtotal = initValue ? initValue.item_subtotal : 0;\r\n        initFormValue.item_amount = initValue ? initValue.item_amount : 0;\r\n\r\n        const itemTypeId = listingData.invoiceItemTypeList.findIndex((i) => i.id === initFormValue.item_type);\r\n        const itemType = listingData.invoiceItemTypeList[itemTypeId];\r\n        initFormValue.isDate = itemType && itemType.is_date === 'Yes' ? true : false;\r\n        setIsDate(itemType && itemType.is_date === 'Yes' ? true : false);\r\n    }, []);\r\n\r\n    return (\r\n        <form id={formId} onSubmit={formik.handleSubmit}>\r\n            <Grid container spacing={2}>\r\n                <Grid item xs={12}>\r\n                    <Grid container alignItems=\"center\" spacing={2}>\r\n                        {initData.is_bifurcated === 'Yes' && (\r\n                            <Grid item xs={12} sm={12}>\r\n                                <FormControl\r\n                                    size=\"small\"\r\n                                    fullWidth\r\n                                    error={formik.touched.bifurcated_client && Boolean(formik.errors.bifurcated_client)}\r\n                                >\r\n                                    <InputLabel id=\"itemTypeLabel\">Bifurcated Client</InputLabel>\r\n                                    <Select\r\n                                        fullWidth\r\n                                        labelId=\"itemTypeLabel\"\r\n                                        id=\"bifurcated_client\"\r\n                                        name=\"bifurcated_client\"\r\n                                        label=\"Bifurcated Client\"\r\n                                        value={formik.values.bifurcated_client}\r\n                                        onChange={(e) => {\r\n                                            formik.handleChange(e);\r\n                                            const getIndex = listingData.bifurcatedClientList.findIndex((i) => i.id === e.target.value);\r\n                                            const selectedClient = listingData.bifurcatedClientList[getIndex];\r\n                                            formik.setFieldValue('item_resource_name', `${selectedClient.client_name} - `);\r\n                                        }}\r\n                                    >\r\n                                        {listingData.bifurcatedClientList.map((item, idx) => (\r\n                                            <MenuItem value={item.id} key={idx}>\r\n                                                {item.client_name} - {item.company_name}\r\n                                            </MenuItem>\r\n                                        ))}\r\n                                    </Select>\r\n                                    <FormHelperText>{formik.touched.bifurcated_client && formik.errors.bifurcated_client}</FormHelperText>\r\n                                </FormControl>\r\n                            </Grid>\r\n                        )}\r\n                        <Grid item xs={12} sm={6}>\r\n                            <FormControl size=\"small\" fullWidth error={formik.touched.item_type && Boolean(formik.errors.item_type)}>\r\n                                <InputLabel id=\"itemTypeLabel\">Item type</InputLabel>\r\n                                <Select\r\n                                    fullWidth\r\n                                    labelId=\"itemTypeLabel\"\r\n                                    id=\"item_type\"\r\n                                    name=\"item_type\"\r\n                                    label=\"Item type\"\r\n                                    value={formik.values.item_type}\r\n                                    onChange={(e) => {\r\n                                        initFormValue.item_type = e.target.value;\r\n                                        changeTypeHandler(e);\r\n                                    }}\r\n                                >\r\n                                    {listingData.invoiceItemTypeList.map((item, idx) => (\r\n                                        <MenuItem value={item.id} key={idx}>\r\n                                            {item.item_type_name}\r\n                                        </MenuItem>\r\n                                    ))}\r\n                                </Select>\r\n                                <FormHelperText>{formik.touched.item_type && formik.errors.item_type}</FormHelperText>\r\n                            </FormControl>\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={6}>\r\n                            <TextField\r\n                                fullWidth\r\n                                size=\"small\"\r\n                                id=\"item_resource_name\"\r\n                                name=\"item_resource_name\"\r\n                                label={<Required title=\"Resource name\" />}\r\n                                value={formik.values.item_resource_name}\r\n                                onChange={(e) => {\r\n                                    formik.handleChange(e);\r\n                                }}\r\n                                error={formik.touched.item_resource_name && Boolean(formik.errors.item_resource_name)}\r\n                                helperText={formik.touched.item_resource_name && formik.errors.item_resource_name}\r\n                            />\r\n                        </Grid>\r\n                        {isDate && (\r\n                            <>\r\n                                <Grid item xs={12} sm={6}>\r\n                                    <LocalizationProvider dateAdapter={AdapterMoment}>\r\n                                        <DesktopDatePicker\r\n                                            id=\"item_start_date\"\r\n                                            name=\"item_start_date\"\r\n                                            label={<Required title=\"Start date\" />}\r\n                                            inputFormat=\"YYYY-MM-DD\"\r\n                                            value={formik.values.item_start_date}\r\n                                            maxDate={moment()}\r\n                                            onChange={(date) => {\r\n                                                const itemTypeID = formik.values.item_type;\r\n                                                initFormValue.item_type = itemTypeID;\r\n                                                initFormValue.item_start_date = moment(date).format('YYYY-MM-DD');\r\n                                                changeTypeHandler();\r\n                                                changeDateHandler('item_start_date', moment(date).format('YYYY-MM-DD'));\r\n                                            }}\r\n                                            renderInput={(params) => (\r\n                                                <TextField\r\n                                                    fullWidth\r\n                                                    size=\"small\"\r\n                                                    {...params}\r\n                                                    error={formik.touched.item_start_date && Boolean(formik.errors.item_start_date)}\r\n                                                    helperText={formik.touched.item_start_date && formik.errors.item_start_date}\r\n                                                />\r\n                                            )}\r\n                                        />\r\n                                    </LocalizationProvider>\r\n                                </Grid>\r\n                                <Grid item xs={12} sm={6}>\r\n                                    <LocalizationProvider dateAdapter={AdapterMoment}>\r\n                                        <DesktopDatePicker\r\n                                            id=\"item_end_date\"\r\n                                            name=\"item_end_date\"\r\n                                            label={<Required title=\"End date\" />}\r\n                                            inputFormat=\"YYYY-MM-DD\"\r\n                                            value={formik.values.item_end_date}\r\n                                            minDate={formik.values.item_start_date}\r\n                                            onChange={(date) => {\r\n                                                initFormValue.item_end_date = moment(date).format('YYYY-MM-DD');\r\n                                                changeDateHandler('item_end_date', moment(date).format('YYYY-MM-DD'));\r\n                                            }}\r\n                                            renderInput={(params) => (\r\n                                                <TextField\r\n                                                    fullWidth\r\n                                                    size=\"small\"\r\n                                                    {...params}\r\n                                                    error={formik.touched.item_end_date && Boolean(formik.errors.item_end_date)}\r\n                                                    helperText={formik.touched.item_end_date && formik.errors.item_end_date}\r\n                                                />\r\n                                            )}\r\n                                        />\r\n                                    </LocalizationProvider>\r\n                                </Grid>\r\n                                <Grid item xs={12} sm={6}>\r\n                                    <TextField\r\n                                        fullWidth\r\n                                        size=\"small\"\r\n                                        id=\"item_actual_days\"\r\n                                        name=\"item_actual_days\"\r\n                                        label={<Required title=\"Total Working Days\" />}\r\n                                        value={formik.values.item_actual_days}\r\n                                        error={formik.touched.item_actual_days && Boolean(formik.errors.item_actual_days)}\r\n                                        helperText={formik.touched.item_actual_days && formik.errors.item_actual_days}\r\n                                        onChange={(e) => {\r\n                                            initFormValue.item_actual_days = e.target.value;\r\n                                            formik.handleChange(e);\r\n                                            changeAmount();\r\n                                        }}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={12} sm={6}>\r\n                                    <TextField\r\n                                        fullWidth\r\n                                        size=\"small\"\r\n                                        id=\"item_working_days\"\r\n                                        name=\"item_working_days\"\r\n                                        label={<Required title=\"Worked Days\" />}\r\n                                        value={formik.values.item_working_days}\r\n                                        onChange={(e) => {\r\n                                            initFormValue.item_working_days = e.target.value;\r\n                                            formik.handleChange(e);\r\n                                            changeAmount();\r\n                                        }}\r\n                                        error={formik.touched.item_working_days && Boolean(formik.errors.item_working_days)}\r\n                                        helperText={formik.touched.item_working_days && formik.errors.item_working_days}\r\n                                    />\r\n                                </Grid>\r\n                            </>\r\n                        )}\r\n\r\n                        <Grid item xs={12} sm={4}>\r\n                            <TextField\r\n                                fullWidth\r\n                                type=\"number\"\r\n                                size=\"small\"\r\n                                id=\"item_qty\"\r\n                                name=\"item_qty\"\r\n                                label={<Required title=\"Resource / Hours\" />}\r\n                                value={formik.values.item_qty}\r\n                                onChange={(e) => {\r\n                                    initFormValue.item_qty = e.target.value;\r\n                                    formik.handleChange(e);\r\n                                    changeAmount();\r\n                                }}\r\n                                error={formik.touched.item_qty && Boolean(formik.errors.item_qty)}\r\n                                helperText={formik.touched.item_qty && formik.errors.item_qty}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={4}>\r\n                            <TextField\r\n                                fullWidth\r\n                                type=\"number\"\r\n                                size=\"small\"\r\n                                id=\"item_rate\"\r\n                                name=\"item_rate\"\r\n                                label={<Required title=\"Rate\" />}\r\n                                value={formik.values.item_rate}\r\n                                onChange={(e) => {\r\n                                    initFormValue.item_rate = e.target.value;\r\n                                    changeAmount();\r\n                                    formik.handleChange(e);\r\n                                }}\r\n                                error={formik.touched.item_rate && Boolean(formik.errors.item_rate)}\r\n                                helperText={formik.touched.item_rate && formik.errors.item_rate}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={4}>\r\n                            <TextField\r\n                                fullWidth\r\n                                type=\"number\"\r\n                                size=\"small\"\r\n                                id=\"item_deduction\"\r\n                                name=\"item_deduction\"\r\n                                label={<Required title=\"Deduction\" />}\r\n                                value={formik.values.item_deduction}\r\n                                onChange={(e) => {\r\n                                    initFormValue.item_deduction = e.target.value;\r\n                                    changeAmount();\r\n                                    formik.handleChange(e);\r\n                                }}\r\n                                error={formik.touched.item_deduction && Boolean(formik.errors.item_deduction)}\r\n                                helperText={formik.touched.item_deduction && formik.errors.item_deduction}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={4}>\r\n                            <TextField\r\n                                fullWidth\r\n                                size=\"small\"\r\n                                id=\"item_tax_amount\"\r\n                                name=\"item_tax_amount\"\r\n                                label={<Required title=\"Tax Amount\" />}\r\n                                value={formik.values.item_tax_amount}\r\n                                onChange={(e) => {\r\n                                    initFormValue.item_tax_amount = e.target.value;\r\n                                    formik.handleChange(e);\r\n                                }}\r\n                                error={formik.touched.item_tax_amount && Boolean(formik.errors.item_tax_amount)}\r\n                                helperText={formik.touched.item_tax_amount && formik.errors.item_tax_amount}\r\n                                disabled\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={4}>\r\n                            <TextField\r\n                                fullWidth\r\n                                type=\"number\"\r\n                                size=\"small\"\r\n                                id=\"item_discount\"\r\n                                name=\"item_discount\"\r\n                                label={<Required title=\"Discount\" />}\r\n                                value={formik.values.item_discount}\r\n                                onChange={(e) => {\r\n                                    initFormValue.item_discount = e.target.value;\r\n                                    changeAmount();\r\n                                    formik.handleChange(e);\r\n                                }}\r\n                                error={formik.touched.item_discount && Boolean(formik.errors.item_discount)}\r\n                                helperText={formik.touched.item_discount && formik.errors.item_discount}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={4}>\r\n                            <TextField\r\n                                fullWidth\r\n                                size=\"small\"\r\n                                id=\"item_amount\"\r\n                                name=\"item_amount\"\r\n                                label={<Required title=\"Amount\" />}\r\n                                value={formik.values.item_amount}\r\n                                onChange={(e) => {\r\n                                    initFormValue.item_amount = e.target.value;\r\n                                    formik.handleChange(e);\r\n                                }}\r\n                                disabled\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={12}>\r\n                            <TextField\r\n                                fullWidth\r\n                                multiline\r\n                                rows={4}\r\n                                size=\"small\"\r\n                                id=\"item_description\"\r\n                                name=\"item_description\"\r\n                                label=\"Description\"\r\n                                value={formik.values.item_description}\r\n                                onChange={formik.handleChange}\r\n                                error={formik.touched.item_description && Boolean(formik.errors.item_description)}\r\n                                helperText={formik.touched.item_description && formik.errors.item_description}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </form>\r\n    );\r\n};\r\n","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"m14.06 9.02.92.92L5.92 19H5v-.92l9.06-9.06M17.66 3c-.25 0-.51.1-.7.29l-1.83 1.83 3.75 3.75 1.83-1.83c.39-.39.39-1.02 0-1.41l-2.34-2.34c-.2-.2-.45-.29-.71-.29zm-3.6 3.19L3 17.25V21h3.75L17.81 9.94l-3.75-3.75z\"\n}), 'EditOutlined');","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M16 1H4c-1.1 0-2 .9-2 2v14h2V3h12V1zm3 4H8c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h11c1.1 0 2-.9 2-2V7c0-1.1-.9-2-2-2zm0 16H8V7h11v14z\"\n}), 'ContentCopyOutlined');","import propTypes from 'prop-types';\r\nimport {\r\n    Autocomplete,\r\n    Checkbox,\r\n    FormControl,\r\n    FormHelperText,\r\n    Grid,\r\n    IconButton,\r\n    InputLabel,\r\n    Link,\r\n    MenuItem,\r\n    Select,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    TextField,\r\n    Typography\r\n} from '@mui/material';\r\nimport { Box } from '@mui/system';\r\nimport Required from 'views/utilities/Required';\r\nimport { useFormik } from 'formik';\r\nimport { DesktopDatePicker, LocalizationProvider } from '@mui/x-date-pickers';\r\nimport { AdapterMoment } from '@mui/x-date-pickers/AdapterMoment';\r\nimport moment from 'moment';\r\nimport { useEffect, useState } from 'react';\r\nimport { AddEditItem } from './AddEditItem';\r\nimport CenterDialog from 'views/utilities/CenterDialog';\r\nimport { useMemo } from 'react';\r\nimport { ContentCopyOutlined, DeleteOutline, EditOutlined } from '@mui/icons-material';\r\n\r\n// third party\r\nimport * as yup from 'yup';\r\nimport { InvoiceAddUpdateApi, InvoiceCurrencyApi } from 'apis/Invoice';\r\nimport { apiErrorSnackBar, apiSuccessSnackBar, apiValidationSnackBar } from 'utils/SnackBar';\r\nimport useAuth from 'hooks/useAuth';\r\n\r\nconst validationSchema = yup.object().shape({\r\n    client_id: yup.string().required('Client is required.'),\r\n    invoice_number: yup.string().required('Invoice number is required.'),\r\n    invoice_date: yup.string().required('Invoice date is required.'),\r\n    invoice_due_date: yup.string().required('Invoice due date is required.'),\r\n    discount_type: yup.string().required('Discount type is required.'),\r\n    invoice_currency_id: yup.string().required('Invoice currency is required.'),\r\n    ccr: yup.string().required('Currency conversion rate is required.')\r\n});\r\n\r\nconst RateParams = {\r\n    currency_id: 0,\r\n    company_id: 0\r\n};\r\n\r\nlet itemType = 'add';\r\nconst AddEditInvoice = ({ value, formId, onSubmit }) => {\r\n    const initValue = value ?? false;\r\n    const initInvoice = initValue?.invoice ?? false;\r\n    const initTaxes = initValue?.invoiceTaxes ?? false;\r\n    const initBanks = initValue?.invoiceBanks ?? false;\r\n    const initItems = initValue?.invoiceItems ?? false;\r\n\r\n    const { company } = useAuth();\r\n    const [openItem, setOpenItem] = useState(false);\r\n    const [openEditItem, setOpenEditItem] = useState(false);\r\n    const [callFunction, setCallFunction] = useState(false);\r\n    const [itemData, setItemData] = useState([]);\r\n    const [itemRowData, setItemRowData] = useState({});\r\n    const [fieldSum, setFieldSum] = useState({\r\n        totalTax: 0,\r\n        totalDeduction: 0,\r\n        totalDiscount: 0,\r\n        subTotal: 0,\r\n        grandTotal: 0\r\n    });\r\n\r\n    useEffect(() => {\r\n        setFieldSum({\r\n            totalTax: initInvoice ? initInvoice.total_tax_amount : 0,\r\n            totalDeduction: initInvoice ? initInvoice.total_discount : 0,\r\n            totalDiscount: initInvoice ? initInvoice.total_discount : 0,\r\n            subTotal: initInvoice ? initInvoice.subtotal : 0,\r\n            grandTotal: initInvoice ? initInvoice.invoice_currency_total_amount : 0\r\n        });\r\n\r\n        const array = [];\r\n        initItems &&\r\n            initItems.map((i, idx) => {\r\n                const obj = {\r\n                    bifurcated_client: i.client_id,\r\n                    id: i.id,\r\n                    item_actual_days: Number(i.actual_days),\r\n                    item_amount: i.total_amount,\r\n                    item_deduction: i.deduction,\r\n                    item_description: i.description,\r\n                    item_discount: i.discount,\r\n                    item_discount_amount: i.discount_amount,\r\n                    item_end_date: i.end_date,\r\n                    item_qty: Number(i.resource_quantity),\r\n                    item_rate: Number(i.rate),\r\n                    item_resource_name: i.resource_name,\r\n                    item_start_date: i.start_date,\r\n                    item_subtotal: i.subtotal,\r\n                    item_tax_amount: i.tax_amount,\r\n                    item_type: i.item_type_id,\r\n                    item_working_days: Number(i.working_days)\r\n                };\r\n                array.push(obj);\r\n            });\r\n        setItemData(array);\r\n\r\n        const filterData = initTaxes ? initValue.taxList.filter((a) => initTaxes.some((b) => a.id === b.tax_id)) : [];\r\n        formik.setFieldValue('tax_id', filterData);\r\n        const filterDataBank = initBanks ? initValue.bankList.filter((a) => initBanks.some((b) => a.id === b.company_bank_id)) : [];\r\n        formik.setFieldValue('bank_id', filterDataBank);\r\n    }, []);\r\n\r\n    const submitItemHandler = () => {\r\n        setOpenItem((prevState) => !prevState);\r\n    };\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            id: initInvoice ? initInvoice.id : '',\r\n            client_id: initInvoice ? initInvoice.client_id : '',\r\n            invoice_number: initInvoice ? initInvoice.invoice_no : initValue?.invoice_number,\r\n\r\n            invoice_date: initInvoice ? initInvoice.invoice_date : moment().format('YYYY-MM-DD'),\r\n            invoice_due_date: initInvoice ? initInvoice.invoice_due_date : moment().add(14, 'days').format('YYYY-MM-DD'),\r\n            is_bifurcated: initInvoice ? initInvoice.is_bifurcated : 'No',\r\n            is_display_company_amount: initInvoice ? initInvoice.is_display_company_amount : 'No',\r\n            discount_type: initInvoice ? initInvoice.discount_type : 'AFTER_TAX_PR',\r\n            invoice_currency_id: initInvoice ? initInvoice.invoice_currency_id : '',\r\n            tax_id: [],\r\n            bank_id: [],\r\n            invoice_note: initInvoice ? initInvoice.invoice_note : '',\r\n            ccr: initInvoice ? initInvoice.currency_conversion_rate : '',\r\n            company_amount: initInvoice ? initInvoice.company_currency_total_amount : 0,\r\n            subscriber_ccr: initInvoice ? initInvoice.subscriber_currency_conversion_rate : '',\r\n            subscriber_currency_amount: initInvoice ? initInvoice.subscriber_currency_total_amount : 0,\r\n            USD_ccr: initInvoice ? initInvoice.USD_currency_conversion_rate : '',\r\n            USD_currency_amount: initInvoice ? initInvoice.USD_currency_total_amount : 0,\r\n            invoice_item: [],\r\n            payment_term_id: initInvoice && initInvoice.term_id != null ? initInvoice.term_id : '',\r\n            formType: initInvoice && initInvoice.id ? 'edit' : 'add',\r\n            subscriber_currency_id: initInvoice ? initInvoice.subscriber_currency_id : initValue?.subscriber_currency_id\r\n        },\r\n        validationSchema: validationSchema,\r\n        onSubmit: (values) => {\r\n            values.invoice_item = itemData;\r\n            values.total_tax = fieldSum.totalTax;\r\n            values.total_deduction = fieldSum.totalDeduction;\r\n            values.total_discount = fieldSum.totalDiscount;\r\n            values.subtotal = fieldSum.subTotal;\r\n            values.grand_total = fieldSum.grandTotal;\r\n\r\n            InvoiceAddUpdateApi(values)\r\n                .then((res) => {\r\n                    if (res.data && res.data.status === 1) {\r\n                        if (onSubmit) onSubmit();\r\n                        apiSuccessSnackBar(res);\r\n                    } else {\r\n                        apiValidationSnackBar(res);\r\n                    }\r\n                })\r\n                .catch((err) => {\r\n                    apiErrorSnackBar(err);\r\n                });\r\n        }\r\n    });\r\n\r\n    const totalTaxSum = () => {\r\n        let totalTax = 0;\r\n        formik.values.tax_id.map((i) => {\r\n            totalTax += +i.rate;\r\n        });\r\n        return totalTax;\r\n    };\r\n\r\n    const addItem = () => {\r\n        // totalTaxSum();\r\n        setOpenItem((prevState) => !prevState);\r\n    };\r\n\r\n    // Edit Item\r\n    const editItemHandler = (row, index) => {\r\n        row.index = index;\r\n        setItemRowData(row);\r\n        setOpenEditItem((prevState) => !prevState);\r\n    };\r\n    const updateItemHandler = () => {\r\n        setCallFunction((prevState) => !prevState);\r\n        setOpenEditItem((prevState) => !prevState);\r\n    };\r\n\r\n    useMemo(() => {\r\n        let totalTax = 0;\r\n        let totalDeduction = 0;\r\n        let totalDiscount = 0;\r\n        let subtotal = 0;\r\n        let grandTotal = 0;\r\n        let ccr = formik.values.ccr ?? 0;\r\n        let subscriber_ccr = formik.values.subscriber_ccr ?? 0;\r\n        let USD_ccr = formik.values.USD_ccr ?? 0;\r\n\r\n        itemData.map((i) => {\r\n            totalTax += +i.item_tax_amount;\r\n            totalDeduction += +i.item_deduction;\r\n            totalDiscount += +i.item_discount_amount;\r\n            subtotal += +i.item_subtotal;\r\n            grandTotal += +i.item_amount;\r\n        });\r\n\r\n        setFieldSum({\r\n            totalTax: totalTax.toFixed(2),\r\n            totalDeduction: totalDeduction.toFixed(2),\r\n            totalDiscount: totalDiscount.toFixed(2),\r\n            subTotal: subtotal.toFixed(2),\r\n            grandTotal: grandTotal.toFixed(2)\r\n        });\r\n\r\n        formik.setFieldValue('company_amount', (subtotal * ccr).toFixed(2));\r\n        formik.setFieldValue('subscriber_currency_amount', (subtotal * subscriber_ccr).toFixed(2));\r\n        formik.setFieldValue('USD_currency_amount', (subtotal * USD_ccr).toFixed(2));\r\n    }, [itemData, callFunction]);\r\n\r\n    const deleteItemHandler = (index) => {\r\n        itemData.splice(index, 1);\r\n        setCallFunction((prevState) => !prevState);\r\n    };\r\n\r\n    const copyItemHandler = (index) => {\r\n        const idxData = itemData[index];\r\n        // const currentData = itemData;\r\n        setItemData((prev) => [...prev, idxData]);\r\n    };\r\n\r\n    // Currency Rate\r\n    const handleCurrencyRate = (e) => {\r\n        RateParams.currency_id = e.target.value;\r\n        RateParams.company_id = initInvoice ? initInvoice.company_id : company.company_id;\r\n        InvoiceCurrencyApi(RateParams)\r\n            .then((res) => {\r\n                const rates = res.data.data;\r\n                formik.setFieldValue('ccr', rates.company_ccr);\r\n                formik.setFieldValue('subscriber_ccr', rates.subscriber_ccr);\r\n                formik.setFieldValue('USD_ccr', rates.USD_ccr);\r\n\r\n                let ccr = rates.company_ccr;\r\n                let subscriber_ccr = rates.subscriber_ccr;\r\n                let USD_ccr = rates.USD_ccr;\r\n                let grandTotal = fieldSum.grandTotal;\r\n                let subTotal = fieldSum.subTotal;\r\n                formik.setFieldValue('company_amount', (subTotal * ccr).toFixed(2));\r\n                formik.setFieldValue('subscriber_currency_amount', (subTotal * subscriber_ccr).toFixed(2));\r\n                formik.setFieldValue('USD_currency_amount', (subTotal * USD_ccr).toFixed(2));\r\n            })\r\n            .catch((err) => {\r\n                apiErrorSnackBar(err);\r\n            });\r\n    };\r\n\r\n    /* Change Tax's */\r\n    const taxHandler = (val) => {\r\n        const taxVal = val;\r\n        let totalTaxSum = 0;\r\n        taxVal.map((i) => {\r\n            totalTaxSum += +i.rate;\r\n        });\r\n\r\n        itemData.map((i) => {\r\n            let item = i;\r\n            const qty = i.item_qty;\r\n            const rate = i.item_rate;\r\n            const actual_days = i.item_actual_days;\r\n            const working_days = i.item_working_days;\r\n            const deduction = i.item_deduction;\r\n            const discount = i.item_discount;\r\n            const totalRate = qty * rate;\r\n\r\n            let totalWorkingDayAmount = (working_days * totalRate) / actual_days - deduction;\r\n            let totalTax = 0;\r\n            let subtotal = 0;\r\n            let totalAmount = 0;\r\n\r\n            // Discount Calculation\r\n            const discountType = formik.values.discount_type;\r\n            let discountAmount = 0;\r\n\r\n            if (discountType === 'AFTER_TAX_PR' || discountType === 'AFTER_TAX_FLAT') {\r\n                totalTax = (totalWorkingDayAmount * totalTaxSum) / 100;\r\n                discountAmount = discountType === 'AFTER_TAX_PR' ? ((totalWorkingDayAmount + totalTax) * discount) / 100 : discount;\r\n                discountAmount = Number(discountAmount).toFixed(2);\r\n                subtotal = totalWorkingDayAmount;\r\n                totalAmount = totalWorkingDayAmount + totalTax - discountAmount;\r\n            } else if (discountType === 'BEFORE_TAX_PR' || discountType === 'BEFORE_TAX_FLAT') {\r\n                discountAmount =\r\n                    discountType === 'BEFORE_TAX_PR' ? (totalWorkingDayAmount * discount) / 100 : totalWorkingDayAmount + discount;\r\n                totalWorkingDayAmount = totalWorkingDayAmount - discountAmount;\r\n                totalTax = (totalWorkingDayAmount * totalTaxSum) / 100;\r\n                subtotal = totalWorkingDayAmount;\r\n                totalAmount = totalWorkingDayAmount + totalTax;\r\n            } else {\r\n                totalTax = (totalWorkingDayAmount * totalTaxSum) / 100;\r\n                subtotal = totalWorkingDayAmount;\r\n                totalAmount = totalWorkingDayAmount + totalTax;\r\n            }\r\n\r\n            item.item_tax_amount = totalTax.toFixed(2);\r\n            item.item_discount_amount = discountAmount;\r\n            item.item_subtotal = subtotal.toFixed(2);\r\n            item.item_amount = totalAmount.toFixed(2);\r\n        });\r\n        setCallFunction((prevState) => !prevState);\r\n    };\r\n    return (\r\n        <>\r\n            <Box>\r\n                <form id={formId} onSubmit={formik.handleSubmit}>\r\n                    <Grid item container spacing={2}>\r\n                        <Grid item xs={12} sm={6}>\r\n                            <Autocomplete\r\n                                disableClearable\r\n                                size=\"small\"\r\n                                id=\"client_id\"\r\n                                name=\"client_id\"\r\n                                options={initValue?.clientList ?? []}\r\n                                value={\r\n                                    formik.values.client_id != ''\r\n                                        ? initValue.clientList.filter((a) => a.id == formik.values.client_id)[0]\r\n                                        : null\r\n                                }\r\n                                getOptionLabel={(option) => (option.client_name ? `${option.client_name} - ${option.company_name}` : '')}\r\n                                renderOption={(props, option) => <li {...props}>{`${option.client_name} - ${option.company_name}`}</li>}\r\n                                renderInput={(params) => (\r\n                                    <TextField\r\n                                        {...params}\r\n                                        size=\"small\"\r\n                                        name=\"client_id\"\r\n                                        label={<Required title=\"Client\" />}\r\n                                        error={formik.touched.client_id && Boolean(formik.errors.client_id)}\r\n                                        helperText={formik.touched.client_id && formik.errors.client_id}\r\n                                    />\r\n                                )}\r\n                                onChange={(_, v) => {\r\n                                    formik.setFieldValue(`client_id`, v ? v.id : '');\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={6}>\r\n                            <TextField\r\n                                fullWidth\r\n                                size=\"small\"\r\n                                id=\"invoice_number\"\r\n                                name=\"invoice_number\"\r\n                                label={<Required title=\"Invoice Number\" />}\r\n                                value={formik.values.invoice_number}\r\n                                onChange={formik.handleChange}\r\n                                error={formik.touched.invoice_number && Boolean(formik.errors.invoice_number)}\r\n                                helperText={formik.touched.invoice_number && formik.errors.invoice_number}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={6}>\r\n                            <LocalizationProvider dateAdapter={AdapterMoment}>\r\n                                <DesktopDatePicker\r\n                                    id=\"invoice_date\"\r\n                                    name=\"invoice_date\"\r\n                                    label={<Required title=\"Invoice Date\" />}\r\n                                    inputFormat=\"YYYY-MM-DD\"\r\n                                    value={formik.values.invoice_date}\r\n                                    maxDate={moment()}\r\n                                    onChange={(date) => {\r\n                                        formik.setFieldValue('invoice_due_date', moment(date).add(14, 'days').format('YYYY-MM-DD'));\r\n                                        formik.setFieldValue('invoice_date', moment(date).format('YYYY-MM-DD'));\r\n                                    }}\r\n                                    renderInput={(params) => (\r\n                                        <TextField\r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            {...params}\r\n                                            error={formik.touched.invoice_date && Boolean(formik.errors.invoice_date)}\r\n                                            helperText={formik.touched.invoice_date && formik.errors.invoice_date}\r\n                                        />\r\n                                    )}\r\n                                />\r\n                            </LocalizationProvider>\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={6}>\r\n                            <LocalizationProvider dateAdapter={AdapterMoment}>\r\n                                <DesktopDatePicker\r\n                                    id=\"invoice_due_date\"\r\n                                    name=\"invoice_due_date\"\r\n                                    label={<Required title=\"Invoice Due Date\" />}\r\n                                    inputFormat=\"YYYY-MM-DD\"\r\n                                    value={formik.values.invoice_due_date}\r\n                                    // maxDate={moment()}\r\n                                    onChange={(date) => {\r\n                                        formik.setFieldValue('invoice_due_date', moment(date).format('YYYY-MM-DD'));\r\n                                    }}\r\n                                    renderInput={(params) => (\r\n                                        <TextField\r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            {...params}\r\n                                            error={formik.touched.invoice_due_date && Boolean(formik.errors.invoice_due_date)}\r\n                                            helperText={formik.touched.invoice_due_date && formik.errors.invoice_due_date}\r\n                                        />\r\n                                    )}\r\n                                />\r\n                            </LocalizationProvider>\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={6}>\r\n                            <FormControl\r\n                                size=\"small\"\r\n                                fullWidth\r\n                                error={formik.touched.is_bifurcated && Boolean(formik.errors.is_bifurcated)}\r\n                            >\r\n                                <InputLabel id=\"isBifurcatedLabel\">Is Bifurcated?</InputLabel>\r\n                                <Select\r\n                                    fullWidth\r\n                                    labelId=\"isBifurcatedLabel\"\r\n                                    id=\"is_bifurcated\"\r\n                                    name=\"is_bifurcated\"\r\n                                    label=\"Is Bifurcated?\"\r\n                                    value={formik.values.is_bifurcated}\r\n                                    onChange={formik.handleChange}\r\n                                    disabled={itemData.length > 0 ?? false}\r\n                                >\r\n                                    <MenuItem value={'Yes'} key={0}>\r\n                                        Yes\r\n                                    </MenuItem>\r\n                                    <MenuItem value={'No'} key={1}>\r\n                                        No\r\n                                    </MenuItem>\r\n                                </Select>\r\n                                <FormHelperText>{formik.touched.is_bifurcated && formik.errors.is_bifurcated}</FormHelperText>\r\n                            </FormControl>\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={6}>\r\n                            <FormControl\r\n                                size=\"small\"\r\n                                fullWidth\r\n                                error={formik.touched.is_display_company_amount && Boolean(formik.errors.is_display_company_amount)}\r\n                            >\r\n                                <InputLabel id=\"discountLabel\">Is Display Company Amount?</InputLabel>\r\n                                <Select\r\n                                    fullWidth\r\n                                    labelId=\"discountLabel\"\r\n                                    id=\"is_display_company_amount\"\r\n                                    name=\"is_display_company_amount\"\r\n                                    label=\"Is Display Company Amount?\"\r\n                                    value={formik.values.is_display_company_amount}\r\n                                    onChange={formik.handleChange}\r\n                                >\r\n                                    <MenuItem value={'Yes'} key={0}>\r\n                                        Yes\r\n                                    </MenuItem>\r\n                                    <MenuItem value={'No'} key={1}>\r\n                                        No\r\n                                    </MenuItem>\r\n                                </Select>\r\n                                <FormHelperText>\r\n                                    {formik.touched.is_display_company_amount && formik.errors.is_display_company_amount}\r\n                                </FormHelperText>\r\n                            </FormControl>\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={6}>\r\n                            <FormControl\r\n                                size=\"small\"\r\n                                fullWidth\r\n                                error={formik.touched.discount_type && Boolean(formik.errors.discount_type)}\r\n                            >\r\n                                <InputLabel id=\"discountLabel\">\r\n                                    <Required title=\"Discount Type\" />\r\n                                </InputLabel>\r\n                                <Select\r\n                                    fullWidth\r\n                                    labelId=\"discountLabel\"\r\n                                    id=\"discount_type\"\r\n                                    name=\"discount_type\"\r\n                                    label={<Required title=\"Discount Type\" />}\r\n                                    value={formik.values.discount_type}\r\n                                    onChange={formik.handleChange}\r\n                                    disabled={itemData.length > 0 ?? false}\r\n                                >\r\n                                    {initValue.discountType &&\r\n                                        initValue.discountType.map((i, idx) => (\r\n                                            <MenuItem value={i.id} key={idx}>\r\n                                                {i.name}\r\n                                            </MenuItem>\r\n                                        ))}\r\n                                </Select>\r\n                                <FormHelperText>{formik.touched.discount_type && formik.errors.discount_type}</FormHelperText>\r\n                            </FormControl>\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={6}>\r\n                            <FormControl\r\n                                size=\"small\"\r\n                                fullWidth\r\n                                error={formik.touched.invoice_currency_id && Boolean(formik.errors.invoice_currency_id)}\r\n                            >\r\n                                <InputLabel id=\"invoiceCurrencyLabel\">\r\n                                    <Required title=\"Invoice Currency\" />\r\n                                </InputLabel>\r\n                                <Select\r\n                                    fullWidth\r\n                                    labelId=\"invoiceCurrencyLabel\"\r\n                                    id=\"invoice_currency_id\"\r\n                                    name=\"invoice_currency_id\"\r\n                                    label={<Required title=\"Invoice Currency\" />}\r\n                                    value={formik.values.invoice_currency_id}\r\n                                    onChange={(e) => {\r\n                                        handleCurrencyRate(e);\r\n                                        formik.handleChange(e);\r\n                                    }}\r\n                                >\r\n                                    {initValue &&\r\n                                        initValue?.currencyList.map((i, idx) => (\r\n                                            <MenuItem value={i.id} key={idx}>\r\n                                                {`${i.currency_symbol} - ${i.currency_name}`}\r\n                                            </MenuItem>\r\n                                        ))}\r\n                                </Select>\r\n                                <FormHelperText>{formik.touched.invoice_currency_id && formik.errors.invoice_currency_id}</FormHelperText>\r\n                            </FormControl>\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={12}>\r\n                            <Autocomplete\r\n                                multiple\r\n                                size=\"small\"\r\n                                id=\"tax_id\"\r\n                                name=\"tax_id\"\r\n                                options={initValue.taxList ?? []}\r\n                                value={formik.values.tax_id}\r\n                                getOptionLabel={(option) =>\r\n                                    option.tax_name ? `${option.tax_name} (${option.rate}${option.is_percentage === 'Yes' && '%'}) ` : ''\r\n                                }\r\n                                renderOption={(props, option, { selected }) => (\r\n                                    <li {...props}>\r\n                                        <Checkbox checked={selected} value={option.id} />\r\n                                        {`${option.tax_name} (${option.rate}${option.is_percentage === 'Yes' && '%'}) `}\r\n                                    </li>\r\n                                )}\r\n                                renderInput={(params) => <TextField {...params} size=\"small\" name=\"tax_id\" label=\"TAX's\" />}\r\n                                onChange={(_, v) => {\r\n                                    formik.setFieldValue(`tax_id`, v);\r\n                                    taxHandler(v);\r\n                                }}\r\n                                // disabled={itemData.length > 0 ?? false}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={6}>\r\n                            <FormControl\r\n                                size=\"small\"\r\n                                fullWidth\r\n                                error={formik.touched.payment_term_id && Boolean(formik.errors.payment_term_id)}\r\n                            >\r\n                                <InputLabel id=\"paymentTermID\">Payment Term</InputLabel>\r\n                                <Select\r\n                                    fullWidth\r\n                                    labelId=\"paymentTermID\"\r\n                                    id=\"payment_term_id\"\r\n                                    name=\"payment_term_id\"\r\n                                    label=\"Payment Term\"\r\n                                    value={formik.values.payment_term_id}\r\n                                    onChange={formik.handleChange}\r\n                                >\r\n                                    {initValue.paymentTerms.map((i, idx) => (\r\n                                        <MenuItem value={i.id} key={idx}>\r\n                                            {i.title}\r\n                                        </MenuItem>\r\n                                    ))}\r\n                                </Select>\r\n                                <FormHelperText>{formik.touched.payment_term_id && formik.errors.payment_term_id}</FormHelperText>\r\n                            </FormControl>\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={6}>\r\n                            <Autocomplete\r\n                                multiple\r\n                                size=\"small\"\r\n                                id=\"bank_id\"\r\n                                name=\"bank_id\"\r\n                                options={initValue.bankList ?? []}\r\n                                value={formik.values.bank_id}\r\n                                getOptionLabel={(option) => (option.bank_detail_name ? option.bank_detail_name : '')}\r\n                                renderOption={(props, option, { selected }) => (\r\n                                    <li {...props}>\r\n                                        <Checkbox checked={selected} value={option.id} />\r\n                                        {option.bank_detail_name}\r\n                                    </li>\r\n                                )}\r\n                                renderInput={(params) => <TextField {...params} size=\"small\" name=\"bank_id\" label=\"Bank Details\" />}\r\n                                onChange={(_, v) => {\r\n                                    formik.setFieldValue(`bank_id`, v);\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={12}>\r\n                            <TextField\r\n                                fullWidth\r\n                                multiline\r\n                                rows={4}\r\n                                size=\"small\"\r\n                                id=\"invoice_note\"\r\n                                name=\"invoice_note\"\r\n                                label=\"Invoice Note\"\r\n                                value={formik.values.invoice_note}\r\n                                onChange={formik.handleChange}\r\n                                // error={formik.touched.item_description && Boolean(formik.errors.item_description)}\r\n                                // helperText={formik.touched.item_description && formik.errors.item_description}\r\n                            />\r\n                        </Grid>\r\n\r\n                        {/* Start Invoice Item */}\r\n                        <Grid item xs={12} sm={12}>\r\n                            <Grid container justifyContent=\"space-between\">\r\n                                <Typography variant=\"body1\" align=\"left\">\r\n                                    Invoice Item\r\n                                </Typography>\r\n\r\n                                <Link\r\n                                    underline=\"hover\"\r\n                                    onClick={() => {\r\n                                        addItem();\r\n                                    }}\r\n                                    sx={{\r\n                                        cursor: 'pointer'\r\n                                    }}\r\n                                >\r\n                                    Add Item\r\n                                </Link>\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                        <Grid item xs={12} sm={12}>\r\n                            <TableContainer>\r\n                                <Table>\r\n                                    <TableHead>\r\n                                        <TableRow>\r\n                                            <TableCell>Description</TableCell>\r\n                                            <TableCell align=\"right\">Price</TableCell>\r\n                                            <TableCell align=\"right\">QTY</TableCell>\r\n                                            <TableCell align=\"right\">Deduction</TableCell>\r\n                                            <TableCell align=\"right\">TAX</TableCell>\r\n                                            <TableCell align=\"right\">Discount</TableCell>\r\n                                            <TableCell align=\"right\">Subtotal</TableCell>\r\n                                            <TableCell align=\"right\">Amount</TableCell>\r\n                                            <TableCell align=\"right\">Action</TableCell>\r\n                                        </TableRow>\r\n                                    </TableHead>\r\n                                    <TableBody>\r\n                                        {itemData.map((i, idx) => (\r\n                                            <TableRow key={idx}>\r\n                                                <TableCell>\r\n                                                    {i.item_resource_name}\r\n                                                    <Typography variant=\"subtitle2\">{i.item_description}</Typography>\r\n                                                </TableCell>\r\n                                                <TableCell align=\"right\">{i.item_rate}</TableCell>\r\n                                                <TableCell align=\"right\">{i.item_qty}</TableCell>\r\n                                                <TableCell align=\"right\">{i.item_deduction}</TableCell>\r\n                                                <TableCell align=\"right\">{i.item_tax_amount}</TableCell>\r\n                                                <TableCell align=\"right\">{i.item_discount_amount}</TableCell>\r\n                                                <TableCell align=\"right\">{i.item_subtotal}</TableCell>\r\n                                                <TableCell align=\"right\">{i.item_amount}</TableCell>\r\n                                                <TableCell align=\"right\">\r\n                                                    <IconButton color=\"primary\" component=\"label\" onClick={() => editItemHandler(i, idx)}>\r\n                                                        <EditOutlined fontSize=\"small\" />\r\n                                                    </IconButton>\r\n                                                    <IconButton color=\"secondary\" component=\"label\" onClick={() => copyItemHandler(idx)}>\r\n                                                        <ContentCopyOutlined fontSize=\"small\" />\r\n                                                    </IconButton>\r\n                                                    <IconButton color=\"error\" component=\"label\" onClick={() => deleteItemHandler(idx)}>\r\n                                                        <DeleteOutline fontSize=\"small\" />\r\n                                                    </IconButton>\r\n                                                </TableCell>\r\n                                            </TableRow>\r\n                                        ))}\r\n                                        {itemData.length == 0 && (\r\n                                            <TableRow>\r\n                                                <TableCell align=\"center\" colSpan={9}>\r\n                                                    No Data Found\r\n                                                </TableCell>\r\n                                            </TableRow>\r\n                                        )}\r\n                                    </TableBody>\r\n                                </Table>\r\n                            </TableContainer>\r\n                        </Grid>\r\n                        {/* Final Calculation */}\r\n                        <Grid item xs={12}>\r\n                            <Grid container alignItems=\"center\" spacing={2} justifyContent=\"end\">\r\n                                <Grid item xs={5} sm={3}>\r\n                                    <Typography variant=\"subtitle1\" textAlign=\"end\">\r\n                                        Total Tax\r\n                                    </Typography>\r\n                                </Grid>\r\n                                <Grid item xs={5} sm={3}>\r\n                                    <Typography variant=\"subtitle\">{fieldSum.totalTax}</Typography>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <Grid container alignItems=\"center\" spacing={2} justifyContent=\"end\">\r\n                                <Grid item xs={5} sm={3}>\r\n                                    <Typography variant=\"subtitle1\" textAlign=\"end\">\r\n                                        Total Deduction\r\n                                    </Typography>\r\n                                </Grid>\r\n                                <Grid item xs={5} sm={3}>\r\n                                    <Typography variant=\"subtitle\">{fieldSum.totalDeduction}</Typography>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <Grid container alignItems=\"center\" spacing={2} justifyContent=\"end\">\r\n                                <Grid item xs={5} sm={3}>\r\n                                    <Typography variant=\"subtitle1\" textAlign=\"end\">\r\n                                        Total Discount\r\n                                    </Typography>\r\n                                </Grid>\r\n                                <Grid item xs={5} sm={3}>\r\n                                    <Typography variant=\"subtitle\">{fieldSum.totalDiscount}</Typography>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <Grid container alignItems=\"center\" spacing={2} justifyContent=\"end\">\r\n                                <Grid item xs={5} sm={3}>\r\n                                    <Typography variant=\"subtitle1\" textAlign=\"end\">\r\n                                        Subtotal\r\n                                    </Typography>\r\n                                </Grid>\r\n                                <Grid item xs={5} sm={3}>\r\n                                    <Typography variant=\"subtitle\">{fieldSum.subTotal}</Typography>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <Grid container alignItems=\"center\" spacing={2} justifyContent=\"end\">\r\n                                <Grid item xs={5} sm={3}>\r\n                                    <Typography variant=\"subtitle1\" textAlign=\"end\">\r\n                                        Grand Total\r\n                                    </Typography>\r\n                                </Grid>\r\n                                <Grid item xs={5} sm={3}>\r\n                                    <Typography variant=\"subtitle\">{fieldSum.grandTotal}</Typography>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <Grid container alignItems=\"center\" spacing={2} justifyContent=\"end\">\r\n                                <Grid item xs={7} sm={9} textAlign=\"end\">\r\n                                    <Typography variant=\"subtitle1\">Currency Conversion Rate</Typography>\r\n                                </Grid>\r\n                                <Grid item xs={5} sm={3}>\r\n                                    <TextField\r\n                                        fullWidth\r\n                                        type=\"number\"\r\n                                        size=\"small\"\r\n                                        id=\"ccr\"\r\n                                        name=\"ccr\"\r\n                                        label={<Required title=\"CCR\" />}\r\n                                        value={formik.values.ccr}\r\n                                        onChange={(e) => {\r\n                                            formik.setFieldValue('company_amount', (fieldSum.grandTotal * e.target.value).toFixed(2));\r\n                                            formik.handleChange(e);\r\n                                        }}\r\n                                        error={formik.touched.ccr && Boolean(formik.errors.ccr)}\r\n                                        helperText={formik.touched.ccr && formik.errors.ccr}\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <Grid container alignItems=\"center\" spacing={2} justifyContent=\"end\">\r\n                                <Grid item xs={7} sm={9}>\r\n                                    <Typography variant=\"subtitle1\" textAlign=\"end\">\r\n                                        Company Currency Amount\r\n                                    </Typography>\r\n                                </Grid>\r\n                                <Grid item xs={5} sm={3}>\r\n                                    <Typography variant=\"subtitle\">{formik.values.company_amount}</Typography>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                        {formik.values.invoice_currency_id !== formik.values.subscriber_currency_id && (\r\n                            <>\r\n                                <Grid item xs={12}>\r\n                                    <Grid container alignItems=\"center\" spacing={2} justifyContent=\"end\">\r\n                                        <Grid item xs={7} sm={9} textAlign=\"end\">\r\n                                            <Typography variant=\"subtitle1\">Subscriber Currency Conversion Rate</Typography>\r\n                                        </Grid>\r\n                                        <Grid item xs={5} sm={3}>\r\n                                            <TextField\r\n                                                fullWidth\r\n                                                type=\"number\"\r\n                                                size=\"small\"\r\n                                                id=\"subscriber_ccr\"\r\n                                                name=\"subscriber_ccr\"\r\n                                                label={<Required title=\"Subscriber CCR\" />}\r\n                                                value={formik.values.subscriber_ccr}\r\n                                                onChange={(e) => {\r\n                                                    formik.setFieldValue(\r\n                                                        'subscriber_currency_amount',\r\n                                                        (fieldSum.grandTotal * e.target.value).toFixed(2)\r\n                                                    );\r\n                                                    formik.handleChange(e);\r\n                                                }}\r\n                                                error={formik.touched.subscriber_ccr && Boolean(formik.errors.subscriber_ccr)}\r\n                                                helperText={formik.touched.subscriber_ccr && formik.errors.subscriber_ccr}\r\n                                            />\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                                <Grid item xs={12}>\r\n                                    <Grid container alignItems=\"center\" spacing={2} justifyContent=\"end\">\r\n                                        <Grid item xs={7} sm={9}>\r\n                                            <Typography variant=\"subtitle1\" textAlign=\"end\">\r\n                                                Subscriber Currency Amount\r\n                                            </Typography>\r\n                                        </Grid>\r\n                                        <Grid item xs={5} sm={3}>\r\n                                            <Typography variant=\"subtitle\">{formik.values.subscriber_currency_amount}</Typography>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </>\r\n                        )}\r\n                        <Grid item xs={12}>\r\n                            <Grid container alignItems=\"center\" spacing={2} justifyContent=\"end\">\r\n                                <Grid item xs={7} sm={9} textAlign=\"end\">\r\n                                    <Typography variant=\"subtitle1\">USD Currency Conversion Rate</Typography>\r\n                                </Grid>\r\n                                <Grid item xs={5} sm={3}>\r\n                                    <TextField\r\n                                        fullWidth\r\n                                        type=\"number\"\r\n                                        size=\"small\"\r\n                                        id=\"USD_ccr\"\r\n                                        name=\"USD_ccr\"\r\n                                        label={<Required title=\"USD CCR\" />}\r\n                                        value={formik.values.USD_ccr}\r\n                                        onChange={(e) => {\r\n                                            formik.setFieldValue(\r\n                                                'subscriber_currency_amount',\r\n                                                (fieldSum.grandTotal * e.target.value).toFixed(2)\r\n                                            );\r\n                                            formik.handleChange(e);\r\n                                        }}\r\n                                        error={formik.touched.USD_ccr && Boolean(formik.errors.USD_ccr)}\r\n                                        helperText={formik.touched.USD_ccr && formik.errors.USD_ccr}\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <Grid container alignItems=\"center\" spacing={2} justifyContent=\"end\">\r\n                                <Grid item xs={7} sm={9}>\r\n                                    <Typography variant=\"subtitle1\" textAlign=\"end\">\r\n                                        USD Currency Amount\r\n                                    </Typography>\r\n                                </Grid>\r\n                                <Grid item xs={5} sm={3}>\r\n                                    <Typography variant=\"subtitle\">{formik.values.USD_currency_amount}</Typography>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </form>\r\n            </Box>\r\n\r\n            {openItem && (\r\n                <CenterDialog\r\n                    title={'Add Item'}\r\n                    open={openItem}\r\n                    onClose={() => setOpenItem((prevState) => !prevState)}\r\n                    id=\"addEditItem\"\r\n                    sx={{\r\n                        '&>div:nth-of-type(3)': {\r\n                            '&>div': {\r\n                                minWidth: { md: '50%', xs: '90%' }\r\n                            }\r\n                        }\r\n                    }}\r\n                >\r\n                    <AddEditItem\r\n                        formId=\"addEditItem\"\r\n                        onSubmit={submitItemHandler}\r\n                        initData={formik.values}\r\n                        setItemData={setItemData}\r\n                        itemData={itemData}\r\n                        listingData={{\r\n                            bifurcatedClientList: initValue.bifurcatedClientList,\r\n                            invoiceItemTypeList: initValue.invoiceItemTypeList\r\n                        }}\r\n                    />\r\n                </CenterDialog>\r\n            )}\r\n\r\n            {openEditItem && (\r\n                <CenterDialog\r\n                    title={'Edit Item'}\r\n                    open={openEditItem}\r\n                    onClose={() => setOpenEditItem((prevState) => !prevState)}\r\n                    id=\"addEditItem\"\r\n                    sx={{\r\n                        '&>div:nth-of-type(3)': {\r\n                            '&>div': {\r\n                                minWidth: { md: '50%', xs: '90%' }\r\n                            }\r\n                        }\r\n                    }}\r\n                >\r\n                    <AddEditItem\r\n                        value={itemRowData}\r\n                        formId=\"addEditItem\"\r\n                        onSubmit={updateItemHandler}\r\n                        initData={formik.values}\r\n                        setItemData={setItemData}\r\n                        itemData={itemData}\r\n                        listingData={{\r\n                            bifurcatedClientList: initValue.bifurcatedClientList,\r\n                            invoiceItemTypeList: initValue.invoiceItemTypeList\r\n                        }}\r\n                    />\r\n                </CenterDialog>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nAddEditInvoice.propTypes = {\r\n    value: propTypes.object,\r\n    formId: propTypes.string.isRequired,\r\n    onSubmit: propTypes.func\r\n};\r\n\r\nexport default AddEditInvoice;\r\n","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M20 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h15c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 2v3H5V5h15zm-5 14h-5v-9h5v9zM5 10h3v9H5v-9zm12 9v-9h3v9h-3z\"\n}), 'TableChartOutlined');","import { Card, List, ListItem, ListItemAvatar, ListItemText, Skeleton } from '@mui/material';\r\n\r\nconst CardSkeleton = () => {\r\n    return (\r\n        <Card sx={{ p: 2 }}>\r\n            <List sx={{ py: 0 }}>\r\n                <ListItem alignItems=\"center\" disableGutters sx={{ py: 0 }}>\r\n                    <ListItemAvatar>\r\n                        <Skeleton variant=\"rectangular\" width={44} height={44} />\r\n                    </ListItemAvatar>\r\n                    <ListItemText\r\n                        sx={{ py: 0 }}\r\n                        primary={<Skeleton variant=\"rectangular\" height={20} />}\r\n                        secondary={<Skeleton variant=\"text\" />}\r\n                    />\r\n                </ListItem>\r\n            </List>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default CardSkeleton;\r\n","import propTypes from 'prop-types';\r\nimport { TableChartOutlined } from '@mui/icons-material';\r\nimport { Avatar, List, ListItem, ListItemAvatar, ListItemText, styled, Typography, useTheme } from '@mui/material';\r\nimport { Box } from '@mui/system';\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport CardSkeleton from './CardSkeleton';\r\n\r\nconst CardWrapper = styled(MainCard)(({ theme }) => ({\r\n    backgroundColor: theme.palette.primary.dark,\r\n    color: theme.palette.primary.light,\r\n    overflow: 'hidden',\r\n    position: 'relative',\r\n    '&:after': {\r\n        content: '\"\"',\r\n        position: 'absolute',\r\n        width: 210,\r\n        height: 210,\r\n        background: `linear-gradient(210.04deg, ${theme.palette.primary[200]} -50.94%, rgba(144, 202, 249, 0) 83.49%)`,\r\n        borderRadius: '50%',\r\n        top: -30,\r\n        right: -180\r\n    },\r\n    '&:before': {\r\n        content: '\"\"',\r\n        position: 'absolute',\r\n        width: 210,\r\n        height: 210,\r\n        background: `linear-gradient(140.9deg, ${theme.palette.primary[200]} -14.02%, rgba(144, 202, 249, 0) 77.58%)`,\r\n        borderRadius: '50%',\r\n        top: -160,\r\n        right: -130\r\n    }\r\n}));\r\n\r\nconst PrimaryDarkCard = ({ isLoading, title, count, amount, handleFilter, status }) => {\r\n    const theme = useTheme();\r\n    return (\r\n        <>\r\n            {isLoading ? (\r\n                <CardSkeleton />\r\n            ) : (\r\n                <CardWrapper border={false} content={false} sx={{ cursor: 'pointer' }} onClick={() => handleFilter('filterStatus', status)}>\r\n                    <Box sx={{ p: 2 }}>\r\n                        <List sx={{ py: 0 }}>\r\n                            <ListItem alignItems=\"center\" disableGutters sx={{ py: 0 }}>\r\n                                <ListItemAvatar>\r\n                                    <Avatar\r\n                                        variant=\"rounded\"\r\n                                        sx={{\r\n                                            ...theme.typography.commonAvatar,\r\n                                            ...theme.typography.largeAvatar,\r\n                                            backgroundColor: theme.palette.primary[800],\r\n                                            color: '#fff'\r\n                                        }}\r\n                                    >\r\n                                        <TableChartOutlined fontSize=\"inherit\" />\r\n                                    </Avatar>\r\n                                </ListItemAvatar>\r\n                                <ListItemText\r\n                                    sx={{\r\n                                        py: 0,\r\n                                        mt: 0.45,\r\n                                        mb: 0.45\r\n                                    }}\r\n                                    primary={\r\n                                        <Typography variant=\"h4\" sx={{ color: '#fff' }}>\r\n                                            {amount}\r\n                                        </Typography>\r\n                                    }\r\n                                    secondary={\r\n                                        <Typography variant=\"subtitle2\" sx={{ color: 'primary.light', mt: 0.25 }}>\r\n                                            {title}\r\n                                        </Typography>\r\n                                    }\r\n                                />\r\n                                <ListItemText\r\n                                    primary={\r\n                                        <Typography variant=\"h2\" sx={{ color: '#fff' }} textAlign=\"right\">\r\n                                            {count}\r\n                                        </Typography>\r\n                                    }\r\n                                />\r\n                            </ListItem>\r\n                        </List>\r\n                    </Box>\r\n                </CardWrapper>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nPrimaryDarkCard.propTypes = {\r\n    isLoading: propTypes.bool,\r\n    title: propTypes.string,\r\n    count: propTypes.string,\r\n    amount: propTypes.string,\r\n    handleFilter: propTypes.func,\r\n    status: propTypes.string\r\n};\r\n\r\nexport default PrimaryDarkCard;\r\n","import propTypes from 'prop-types';\r\nimport { TableChartOutlined } from '@mui/icons-material';\r\nimport { Avatar, List, ListItem, ListItemAvatar, ListItemText, styled, Typography, useTheme } from '@mui/material';\r\nimport { Box } from '@mui/system';\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport CardSkeleton from './CardSkeleton';\r\n\r\nconst CardWrapper = styled(MainCard)(({ theme }) => ({\r\n    backgroundColor: theme.palette.secondary.dark,\r\n    color: theme.palette.secondary.light,\r\n    overflow: 'hidden',\r\n    position: 'relative',\r\n    '&:after': {\r\n        content: '\"\"',\r\n        position: 'absolute',\r\n        width: 210,\r\n        height: 210,\r\n        background: `linear-gradient(210.04deg, ${theme.palette.secondary[200]} -50.94%, rgba(144, 202, 249, 0) 83.49%)`,\r\n        borderRadius: '50%',\r\n        top: -30,\r\n        right: -180\r\n    },\r\n    '&:before': {\r\n        content: '\"\"',\r\n        position: 'absolute',\r\n        width: 210,\r\n        height: 210,\r\n        background: `linear-gradient(140.9deg, ${theme.palette.secondary[200]} -14.02%, rgba(144, 202, 249, 0) 77.58%)`,\r\n        borderRadius: '50%',\r\n        top: -160,\r\n        right: -130\r\n    }\r\n}));\r\n\r\nconst SecondaryDarkCard = ({ isLoading, title, count, amount, handleFilter, status }) => {\r\n    const theme = useTheme();\r\n    return (\r\n        <>\r\n            {isLoading ? (\r\n                <CardSkeleton />\r\n            ) : (\r\n                <CardWrapper border={false} content={false} sx={{ cursor: 'pointer' }} onClick={() => handleFilter('filterStatus', status)}>\r\n                    <Box sx={{ p: 2 }}>\r\n                        <List sx={{ py: 0 }}>\r\n                            <ListItem alignItems=\"center\" disableGutters sx={{ py: 0 }}>\r\n                                <ListItemAvatar>\r\n                                    <Avatar\r\n                                        variant=\"rounded\"\r\n                                        sx={{\r\n                                            ...theme.typography.commonAvatar,\r\n                                            ...theme.typography.largeAvatar,\r\n                                            backgroundColor: theme.palette.secondary[800],\r\n                                            color: '#fff'\r\n                                        }}\r\n                                    >\r\n                                        <TableChartOutlined fontSize=\"inherit\" />\r\n                                    </Avatar>\r\n                                </ListItemAvatar>\r\n                                <ListItemText\r\n                                    sx={{\r\n                                        py: 0,\r\n                                        mt: 0.45,\r\n                                        mb: 0.45\r\n                                    }}\r\n                                    primary={\r\n                                        <Typography variant=\"h4\" sx={{ color: '#fff' }}>\r\n                                            {amount}\r\n                                        </Typography>\r\n                                    }\r\n                                    secondary={\r\n                                        <Typography variant=\"subtitle2\" sx={{ color: 'primary.light', mt: 0.25 }}>\r\n                                            {title}\r\n                                        </Typography>\r\n                                    }\r\n                                />\r\n                                <ListItemText\r\n                                    primary={\r\n                                        <Typography variant=\"h2\" sx={{ color: '#fff' }} textAlign=\"right\">\r\n                                            {count}\r\n                                        </Typography>\r\n                                    }\r\n                                />\r\n                            </ListItem>\r\n                        </List>\r\n                    </Box>\r\n                </CardWrapper>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nSecondaryDarkCard.propTypes = {\r\n    isLoading: propTypes.bool,\r\n    title: propTypes.string,\r\n    count: propTypes.string,\r\n    amount: propTypes.string,\r\n    handleFilter: propTypes.func,\r\n    status: propTypes.string\r\n};\r\n\r\nexport default SecondaryDarkCard;\r\n","import { generateUtilityClass, generateUtilityClasses } from '@mui/base';\nexport function getTableFooterUtilityClass(slot) {\n  return generateUtilityClass('MuiTableFooter', slot);\n}\nconst tableFooterClasses = generateUtilityClasses('MuiTableFooter', ['root']);\nexport default tableFooterClasses;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"component\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport Tablelvl2Context from '../Table/Tablelvl2Context';\nimport useThemeProps from '../styles/useThemeProps';\nimport styled from '../styles/styled';\nimport { getTableFooterUtilityClass } from './tableFooterClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getTableFooterUtilityClass, classes);\n};\n\nconst TableFooterRoot = styled('tfoot', {\n  name: 'MuiTableFooter',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})({\n  display: 'table-footer-group'\n});\nconst tablelvl2 = {\n  variant: 'footer'\n};\nconst defaultComponent = 'tfoot';\nconst TableFooter = /*#__PURE__*/React.forwardRef(function TableFooter(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiTableFooter'\n  });\n\n  const {\n    className,\n    component = defaultComponent\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const ownerState = _extends({}, props, {\n    component\n  });\n\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(Tablelvl2Context.Provider, {\n    value: tablelvl2,\n    children: /*#__PURE__*/_jsx(TableFooterRoot, _extends({\n      as: component,\n      className: clsx(classes.root, className),\n      ref: ref,\n      role: component === defaultComponent ? null : 'rowgroup',\n      ownerState: ownerState\n    }, other))\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? TableFooter.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component, normally `TableRow`.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default TableFooter;","import propTypes from 'prop-types';\r\nimport {\r\n    FormControl,\r\n    FormHelperText,\r\n    Grid,\r\n    InputLabel,\r\n    MenuItem,\r\n    Select,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    tableCellClasses,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    TextField,\r\n    Typography\r\n} from '@mui/material';\r\nimport { useFormik } from 'formik';\r\nimport Required from 'views/utilities/Required';\r\n\r\nimport * as yup from 'yup';\r\nimport { DesktopDatePicker, LocalizationProvider } from '@mui/x-date-pickers';\r\nimport { AdapterMoment } from '@mui/x-date-pickers/AdapterMoment';\r\nimport moment from 'moment';\r\nimport { AddEditPaymentApi } from 'apis/Invoice';\r\nimport { apiErrorSnackBar, apiSuccessSnackBar, apiValidationSnackBar } from 'utils/SnackBar';\r\nimport { useEffect } from 'react';\r\n\r\n/**\r\n * Form Validation\r\n */\r\nconst validationSchema = yup.object().shape({\r\n    invoice_status: yup.string().required('Invoice status is required.'),\r\n    ref_no: yup.string().required('Reference no is required.'),\r\n    payment_date: yup.string().required('Payment date no is required.'),\r\n    way_of_payment: yup.string().required('Way of payment is required.'),\r\n    invoiceCurrencyAmount: yup.string().required('Amount in invoice currency is required.'),\r\n    companyCurrencyAmount: yup.string().required('Amount in company currency is required.'),\r\n    tds: yup.string().required('TDS is required.'),\r\n    ccr: yup.string().required('CCR is required.'),\r\n    subscriber_ccr: yup.string().required('Subscriber ccr is required.'),\r\n    USD_ccr: yup.string().required('USD ccr is required.'),\r\n    difference: yup.string().required('Difference is required.')\r\n});\r\n\r\nconst initFormValue = {\r\n    companyAmount: 0,\r\n    tds: 0\r\n};\r\n\r\nconst AddEditPayment = ({ value, formId, invoiceData, currencyRateData, onSubmit }) => {\r\n    const invoice = invoiceData ?? false;\r\n    const currencyRate = currencyRateData ?? false;\r\n    const initValue = value ?? false;\r\n    useEffect(() => {\r\n        initFormValue.companyAmount = 0;\r\n        initFormValue.tds = 0;\r\n    }, []);\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            id: initValue ? initValue.id : '',\r\n            invoice_id: invoice ? invoice.id : '',\r\n            invoice_status: initValue ? initValue.status : '',\r\n            ref_no: initValue ? initValue.reference_no : '',\r\n            payment_date: initValue ? initValue.payment_date : '',\r\n            way_of_payment: initValue ? initValue.payment_source_id : '',\r\n            remainingAmount: invoice.remaining_amount,\r\n            invoiceCurrencyAmount: initValue ? initValue.invoice_currency_amount : '',\r\n            companyCurrencyAmount: initValue ? initValue.company_currency_amount : '',\r\n            tds: initValue ? initValue.tds : '',\r\n            ccr: initValue ? initValue.currency_conversion_rate : currencyRate.company_ccr,\r\n            subscriber_ccr: initValue ? initValue.subscriber_ccr : currencyRate.subscriber_ccr,\r\n            USD_ccr: initValue ? initValue.USD_ccr : currencyRate.USD_ccr,\r\n            difference: initValue ? initValue.difference_amount : '',\r\n            note: initValue ? initValue.note : '',\r\n            formType: initValue && initValue.id ? 'edit' : 'add'\r\n        },\r\n        validationSchema: validationSchema,\r\n        onSubmit: (values, { resetForm }) => {\r\n            AddEditPaymentApi(values)\r\n                .then((res) => {\r\n                    if (res.data && res.data.status === 1) {\r\n                        if (onSubmit) onSubmit();\r\n                        resetForm();\r\n                        apiSuccessSnackBar(res);\r\n                    } else {\r\n                        apiValidationSnackBar(res);\r\n                    }\r\n                })\r\n                .catch((err) => {\r\n                    apiErrorSnackBar(err);\r\n                });\r\n        }\r\n    });\r\n\r\n    const getDifference = () => {\r\n        const remainingAmount = formik.values.remainingAmount;\r\n        const amount = initFormValue.companyAmount;\r\n        const tds = initFormValue.tds;\r\n\r\n        let totalAmount = 0;\r\n        totalAmount = Number(amount) + Number(tds);\r\n\r\n        const totalDifference = totalAmount - Number(remainingAmount);\r\n\r\n        formik.setFieldValue('companyCurrencyAmount', amount);\r\n        formik.setFieldValue('tds', tds);\r\n        formik.setFieldValue('difference', totalDifference.toFixed(2));\r\n    };\r\n\r\n    const invoiceStatusHandler = (e) => {\r\n        const status = e.target.value;\r\n\r\n        if (status === 'Bad Debt') {\r\n            formik.setFieldValue('ref_no', 'Bad Debt');\r\n            formik.setFieldValue('payment_date', invoice.invoice_date);\r\n            formik.setFieldValue('invoiceCurrencyAmount', 0);\r\n            formik.setFieldValue('companyCurrencyAmount', 0);\r\n            formik.setFieldValue('tds', 0);\r\n            formik.setFieldValue('difference', 0);\r\n            formik.setFieldValue('note', 'Bad Debt Invoice');\r\n        } else {\r\n            if (formik.values.ref_no === 'Bad Debt') {\r\n                formik.setFieldValue('ref_no', '');\r\n                formik.setFieldValue('note', '');\r\n                formik.setFieldValue('payment_date', null);\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <form id={formId} onSubmit={formik.handleSubmit}>\r\n            <Grid container spacing={2}>\r\n                <Grid item xs={12}>\r\n                    <TableContainer>\r\n                        <Table\r\n                            size=\"small\"\r\n                            sx={{\r\n                                [`& .${tableCellClasses.root}`]: {\r\n                                    borderBottom: 'none'\r\n                                }\r\n                            }}\r\n                        >\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <TableCell>Title</TableCell>\r\n                                    <TableCell align=\"right\">In Invoice Currency</TableCell>\r\n                                    <TableCell align=\"right\">In Company Currency</TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                <TableRow>\r\n                                    <TableCell>Currency Rate</TableCell>\r\n                                    <TableCell align=\"right\">{currencyRate.invoice_ccr}</TableCell>\r\n                                    <TableCell align=\"right\">{currencyRate.company_ccr}</TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>Net Amount</TableCell>\r\n                                    <TableCell align=\"right\">{invoice.net_amount_invoice}</TableCell>\r\n                                    <TableCell align=\"right\">{invoice.net_amount_company}</TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>Tax</TableCell>\r\n                                    <TableCell align=\"right\">{invoice.tax_invoice}</TableCell>\r\n                                    <TableCell align=\"right\">{invoice.tax_company}</TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>Total Amount</TableCell>\r\n                                    <TableCell align=\"right\">{invoice.total_amount_invoice}</TableCell>\r\n                                    <TableCell align=\"right\">{invoice.total_amount_company}</TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        <Typography variant=\"subtitle1\">Remaining Amount</Typography>\r\n                                    </TableCell>\r\n                                    <TableCell align=\"right\">\r\n                                        <Typography variant=\"subtitle1\">{invoice.remaining_amount_invoice}</Typography>\r\n                                    </TableCell>\r\n                                    <TableCell align=\"right\">\r\n                                        <Typography variant=\"subtitle1\">{invoice.remaining_amount_company}</Typography>\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <Grid container alignItems=\"center\" spacing={2}>\r\n                        {/* Form */}\r\n                        <Grid item xs={12} sm={6}>\r\n                            <FormControl\r\n                                size=\"small\"\r\n                                fullWidth\r\n                                error={formik.touched.invoice_status && Boolean(formik.errors.invoice_status)}\r\n                            >\r\n                                <InputLabel id=\"itemTypeLabel\">Invoice Status</InputLabel>\r\n                                <Select\r\n                                    fullWidth\r\n                                    labelId=\"itemTypeLabel\"\r\n                                    id=\"invoice_status\"\r\n                                    name=\"invoice_status\"\r\n                                    label=\"Invoice Status\"\r\n                                    value={formik.values.invoice_status}\r\n                                    onChange={(e) => {\r\n                                        formik.handleChange(e);\r\n                                        invoiceStatusHandler(e);\r\n                                    }}\r\n                                >\r\n                                    {invoice &&\r\n                                        invoice.invoice_status.map((i, idx) => (\r\n                                            <MenuItem value={i} key={idx}>\r\n                                                {i}\r\n                                            </MenuItem>\r\n                                        ))}\r\n                                </Select>\r\n                                <FormHelperText>{formik.touched.invoice_status && formik.errors.invoice_status}</FormHelperText>\r\n                            </FormControl>\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={6}>\r\n                            <TextField\r\n                                fullWidth\r\n                                size=\"small\"\r\n                                id=\"ref_no\"\r\n                                name=\"ref_no\"\r\n                                disabled={formik.values.invoice_status == 'Bad Debt'}\r\n                                label={<Required title=\"Reference No.\" />}\r\n                                value={formik.values.ref_no}\r\n                                onChange={formik.handleChange}\r\n                                error={formik.touched.ref_no && Boolean(formik.errors.ref_no)}\r\n                                helperText={formik.touched.ref_no && formik.errors.ref_no}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={6}>\r\n                            <LocalizationProvider dateAdapter={AdapterMoment}>\r\n                                <DesktopDatePicker\r\n                                    id=\"payment_date\"\r\n                                    name=\"payment_date\"\r\n                                    label={<Required title=\"Payment Date\" />}\r\n                                    inputFormat=\"YYYY-MM-DD\"\r\n                                    value={formik.values.payment_date}\r\n                                    maxDate={moment()}\r\n                                    onChange={(date) => {\r\n                                        formik.setFieldValue('payment_date', moment(date).format('YYYY-MM-DD'));\r\n                                    }}\r\n                                    renderInput={(params) => (\r\n                                        <TextField\r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            {...params}\r\n                                            error={formik.touched.payment_date && Boolean(formik.errors.payment_date)}\r\n                                            helperText={formik.touched.payment_date && formik.errors.payment_date}\r\n                                        />\r\n                                    )}\r\n                                />\r\n                            </LocalizationProvider>\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={6}>\r\n                            <TextField\r\n                                fullWidth\r\n                                type=\"number\"\r\n                                size=\"small\"\r\n                                id=\"invoiceCurrencyAmount\"\r\n                                name=\"invoiceCurrencyAmount\"\r\n                                label={<Required title={invoice.filed_labels.invoice_amount} />}\r\n                                value={formik.values.invoiceCurrencyAmount}\r\n                                onChange={formik.handleChange}\r\n                                error={formik.touched.invoiceCurrencyAmount && Boolean(formik.errors.invoiceCurrencyAmount)}\r\n                                helperText={formik.touched.invoiceCurrencyAmount && formik.errors.invoiceCurrencyAmount}\r\n                            />\r\n                        </Grid>\r\n\r\n                        <Grid item xs={12} sm={6}>\r\n                            <TextField\r\n                                fullWidth\r\n                                size=\"small\"\r\n                                type=\"number\"\r\n                                id=\"companyCurrencyAmount\"\r\n                                name=\"companyCurrencyAmount\"\r\n                                label={<Required title={invoice.filed_labels.company_amount} />}\r\n                                value={formik.values.companyCurrencyAmount}\r\n                                onChange={(e) => {\r\n                                    initFormValue.companyAmount = e.target.value;\r\n                                    getDifference();\r\n                                }}\r\n                                error={formik.touched.companyCurrencyAmount && Boolean(formik.errors.companyCurrencyAmount)}\r\n                                helperText={formik.touched.companyCurrencyAmount && formik.errors.companyCurrencyAmount}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={6}>\r\n                            <TextField\r\n                                fullWidth\r\n                                size=\"small\"\r\n                                type=\"number\"\r\n                                id=\"tds\"\r\n                                name=\"tds\"\r\n                                label={<Required title=\"TDS\" />}\r\n                                value={formik.values.tds}\r\n                                onChange={(e) => {\r\n                                    initFormValue.tds = e.target.value;\r\n                                    getDifference();\r\n                                }}\r\n                                error={formik.touched.tds && Boolean(formik.errors.tds)}\r\n                                helperText={formik.touched.tds && formik.errors.tds}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={6}>\r\n                            <TextField\r\n                                fullWidth\r\n                                size=\"small\"\r\n                                type=\"number\"\r\n                                id=\"ccr\"\r\n                                name=\"ccr\"\r\n                                label={<Required title={invoice.filed_labels.company_ccr} />}\r\n                                value={formik.values.ccr}\r\n                                onChange={formik.handleChange}\r\n                                error={formik.touched.ccr && Boolean(formik.errors.ccr)}\r\n                                helperText={formik.touched.ccr && formik.errors.ccr}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={6}>\r\n                            <TextField\r\n                                fullWidth\r\n                                size=\"small\"\r\n                                type=\"number\"\r\n                                id=\"difference\"\r\n                                name=\"difference\"\r\n                                label={<Required title=\"Difference\" />}\r\n                                value={formik.values.difference}\r\n                                onChange={formik.handleChange}\r\n                                error={formik.touched.difference && Boolean(formik.errors.difference)}\r\n                                helperText={formik.touched.difference && formik.errors.difference}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={6}>\r\n                            <TextField\r\n                                fullWidth\r\n                                size=\"small\"\r\n                                type=\"number\"\r\n                                id=\"subscriber_ccr\"\r\n                                name=\"subscriber_ccr\"\r\n                                label={<Required title={invoice.filed_labels.sub_ccr} />}\r\n                                value={formik.values.subscriber_ccr}\r\n                                onChange={formik.handleChange}\r\n                                error={formik.touched.subscriber_ccr && Boolean(formik.errors.subscriber_ccr)}\r\n                                helperText={formik.touched.subscriber_ccr && formik.errors.subscriber_ccr}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={6}>\r\n                            <TextField\r\n                                fullWidth\r\n                                size=\"small\"\r\n                                type=\"number\"\r\n                                id=\"USD_ccr\"\r\n                                name=\"USD_ccr\"\r\n                                label={<Required title=\"USD ccr\" />}\r\n                                value={formik.values.USD_ccr}\r\n                                onChange={formik.handleChange}\r\n                                error={formik.touched.USD_ccr && Boolean(formik.errors.USD_ccr)}\r\n                                helperText={formik.touched.USD_ccr && formik.errors.USD_ccr}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={12}>\r\n                            <FormControl\r\n                                size=\"small\"\r\n                                fullWidth\r\n                                error={formik.touched.way_of_payment && Boolean(formik.errors.way_of_payment)}\r\n                            >\r\n                                <InputLabel id=\"itemTypeLabel\">{<Required title=\"Way of Payment\" />}</InputLabel>\r\n                                <Select\r\n                                    fullWidth\r\n                                    labelId=\"itemTypeLabel\"\r\n                                    id=\"way_of_payment\"\r\n                                    name=\"way_of_payment\"\r\n                                    label={<Required title=\"Way of Payment\" />}\r\n                                    value={formik.values.way_of_payment}\r\n                                    onChange={formik.handleChange}\r\n                                >\r\n                                    {invoice &&\r\n                                        invoice.way_of_payment.map((i, idx) => (\r\n                                            <MenuItem value={i.id} key={idx}>\r\n                                                {i.payment_source_name}\r\n                                            </MenuItem>\r\n                                        ))}\r\n                                </Select>\r\n                                <FormHelperText>{formik.touched.way_of_payment && formik.errors.way_of_payment}</FormHelperText>\r\n                            </FormControl>\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={12}>\r\n                            <TextField\r\n                                fullWidth\r\n                                multiline\r\n                                size=\"small\"\r\n                                id=\"note\"\r\n                                name=\"note\"\r\n                                rows={5}\r\n                                label=\"Note\"\r\n                                value={formik.values.note}\r\n                                onChange={formik.handleChange}\r\n                                error={formik.touched.note && Boolean(formik.errors.note)}\r\n                                helperText={formik.touched.note && formik.errors.note}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </form>\r\n    );\r\n};\r\n\r\nAddEditPayment.propTypes = {\r\n    formId: propTypes.string,\r\n    value: propTypes.object,\r\n    invoiceData: propTypes.object,\r\n    currencyRateData: propTypes.object,\r\n    onSubmit: propTypes.func\r\n};\r\n\r\nexport default AddEditPayment;\r\n","import { DeleteOutline, Edit as EditIcon } from '@mui/icons-material';\r\nimport { IconButton, Table, TableBody, TableCell, TableContainer, TableHead, TablePagination, TableRow } from '@mui/material';\r\nimport { DeletePaymentApi, InitPaymentApi, PaymentListApi } from 'apis/Invoice';\r\nimport { useEffect, useState } from 'react';\r\nimport { apiErrorSnackBar, apiSuccessSnackBar, apiValidationSnackBar } from 'utils/SnackBar';\r\nimport CenterDialog from 'views/utilities/CenterDialog';\r\nimport DeleteDialog from 'views/utilities/DeleteDialog';\r\nimport AddEditPayment from './AddEditPayment';\r\n\r\nconst params = {\r\n    invoice_id: '',\r\n    search: '',\r\n    displayLength: 10,\r\n    displayStart: 0,\r\n    orderDir: 'ASC',\r\n    orderColumn: 0\r\n};\r\n\r\nlet recordsTotal = 0;\r\nconst PaymentList = ({ search, invoiceID, callApi }) => {\r\n    const [data, setData] = useState([]);\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(10);\r\n    const [order, setOrder] = useState('asc');\r\n    const [orderBy, setOrderBy] = useState('0');\r\n    const [openEdit, setOpenEdit] = useState(false);\r\n    const [openDelete, setOpenDelete] = useState(false);\r\n    const [paymentData, setPaymentData] = useState({});\r\n    const [invoiceData, setInvoiceData] = useState({});\r\n\r\n    // ========== Table Pagination ========== //\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n\r\n    const handleRequestSort = (property) => {\r\n        const isAsc = orderBy === property && order === 'asc';\r\n        setOrder(isAsc ? 'desc' : 'asc');\r\n        setOrderBy(property);\r\n    };\r\n\r\n    const getData = () => {\r\n        PaymentListApi(params)\r\n            .then((res) => {\r\n                recordsTotal = res.data.data.totalCount;\r\n                setData(res.data.data.data);\r\n            })\r\n            .catch((err) => {\r\n                apiErrorSnackBar(err);\r\n            });\r\n    };\r\n\r\n    useEffect(() => {\r\n        params.invoice_id = invoiceID;\r\n        params.search = search;\r\n        params.displayLength = rowsPerPage;\r\n        params.displayStart = rowsPerPage * page;\r\n        params.orderDir = order?.toUpperCase() ?? params.orderDir;\r\n        params.orderColumn = Number(orderBy);\r\n        getData();\r\n    }, [page, rowsPerPage, order, orderBy, search, callApi]);\r\n\r\n    // ========== Edit ========== //\r\n    const editData = (row) => {\r\n        InitPaymentApi({ id: row.id, type: 'edit', invoice_id: invoiceID })\r\n            .then((res) => {\r\n                setPaymentData(res.data.data.paymentData);\r\n                setInvoiceData(res.data.data.invoiceData);\r\n                setOpenEdit((prevState) => !prevState);\r\n            })\r\n            .catch((err) => {\r\n                apiErrorSnackBar(err);\r\n            });\r\n    };\r\n\r\n    const submitHandler = () => {\r\n        setOpenEdit((prevState) => !prevState);\r\n        getData();\r\n    };\r\n    // ========== Delete ========== //\r\n    const deleteData = (row) => {\r\n        setPaymentData(row);\r\n        setOpenDelete(true);\r\n    };\r\n\r\n    const deleteHandler = () => {\r\n        DeletePaymentApi({ id: paymentData.id })\r\n            .then((res) => {\r\n                if (res.data && res.data.status === 1) {\r\n                    setPage(0);\r\n                    getData();\r\n                    setOpenDelete(false);\r\n                    apiSuccessSnackBar(res);\r\n                } else {\r\n                    apiValidationSnackBar(res);\r\n                }\r\n            })\r\n            .catch((err) => {\r\n                apiErrorSnackBar(err);\r\n            });\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <TableContainer>\r\n                <Table>\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell>Ref No.</TableCell>\r\n                            <TableCell>Payment Date</TableCell>\r\n                            <TableCell align=\"right\">Amount</TableCell>\r\n                            <TableCell align=\"right\">TDS</TableCell>\r\n                            <TableCell>Way Of Payment</TableCell>\r\n                            <TableCell>Status</TableCell>\r\n                            <TableCell align=\"right\">Action</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {data.map((item, idx) => (\r\n                            <TableRow key={idx}>\r\n                                <TableCell>{item.reference_no}</TableCell>\r\n                                <TableCell>{item.payment_date}</TableCell>\r\n                                <TableCell align=\"right\">{item.company_currency_amount}</TableCell>\r\n                                <TableCell align=\"right\">{item.tds}</TableCell>\r\n                                <TableCell>{item.payment_source_name}</TableCell>\r\n                                <TableCell>{item.status}</TableCell>\r\n                                <TableCell align=\"right\">\r\n                                    <IconButton color=\"primary\" component=\"label\" onClick={() => editData(item)}>\r\n                                        <EditIcon fontSize=\"small\" />\r\n                                    </IconButton>\r\n                                    <IconButton color=\"error\" component=\"label\" onClick={() => deleteData(item)}>\r\n                                        <DeleteOutline fontSize=\"small\" />\r\n                                    </IconButton>\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n            <TablePagination\r\n                rowsPerPageOptions={[10, 25, 50, 100]}\r\n                component=\"div\"\r\n                count={Number(recordsTotal)}\r\n                rowsPerPage={rowsPerPage}\r\n                page={page}\r\n                onPageChange={handleChangePage}\r\n                onRowsPerPageChange={handleChangeRowsPerPage}\r\n            />\r\n\r\n            {/* Invoice payment edit */}\r\n            {openEdit && (\r\n                <CenterDialog\r\n                    title={`Edit Invoice Payment`}\r\n                    open={openEdit}\r\n                    onClose={() => setOpenEdit((prevState) => !prevState)}\r\n                    id=\"editPayment\"\r\n                >\r\n                    <AddEditPayment value={paymentData} formId=\"editPayment\" invoiceData={invoiceData} onSubmit={submitHandler} />\r\n                </CenterDialog>\r\n            )}\r\n\r\n            {/* Invoice Delete */}\r\n            {openDelete && (\r\n                <DeleteDialog\r\n                    onDeleteHandler={deleteHandler}\r\n                    onClose={() => setOpenDelete(false)}\r\n                    open={openDelete}\r\n                    dept=\"invoice Payment\"\r\n                    name={paymentData['reference_no']}\r\n                />\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default PaymentList;\r\n","import { AddCircleOutlineOutlined } from '@mui/icons-material';\r\nimport { Button, Grid, InputAdornment, OutlinedInput } from '@mui/material';\r\nimport { IconSearch } from '@tabler/icons';\r\nimport { InitPaymentApi } from 'apis/Invoice';\r\nimport { useState } from 'react';\r\nimport { gridSpacing } from 'store/constant';\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport { apiErrorSnackBar } from 'utils/SnackBar';\r\nimport CenterDialog from 'views/utilities/CenterDialog';\r\nimport AddEditPayment from './AddEditPayment';\r\nimport PaymentList from './PaymentList';\r\n\r\nconst Index = ({ invoiceID }) => {\r\n    const [search, setSearch] = useState('');\r\n    const [openAdd, setOpenAdd] = useState(false);\r\n    const [callApi, setCallApi] = useState(false);\r\n    const [invoiceData, setInvoiceData] = useState({});\r\n    const [currencyRateData, setCurrencyRate] = useState({});\r\n\r\n    const handleSearch = (event) => {\r\n        setSearch(event.target.value);\r\n    };\r\n\r\n    const addData = () => {\r\n        InitPaymentApi({ type: 'add', invoice_id: invoiceID })\r\n            .then((res) => {\r\n                setInvoiceData(res.data.data.invoiceData);\r\n                setCurrencyRate(res.data.data.currency_rate);\r\n                setOpenAdd((prevState) => !prevState);\r\n            })\r\n            .catch((err) => {\r\n                apiErrorSnackBar(err);\r\n            });\r\n    };\r\n\r\n    const submitHandler = () => {\r\n        setOpenAdd((prevState) => !prevState);\r\n        setCallApi((prevState) => !prevState);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <MainCard\r\n                title={\r\n                    <Grid container alignItems=\"center\" spacing={gridSpacing} sx={{ mb: -1, mt: -4 }}>\r\n                        <Grid item xs={12}>\r\n                            <Grid container alignItems=\"center\" spacing={gridSpacing}>\r\n                                <Grid item sx={{ flexGrow: 1 }}>\r\n                                    {/* <Typography variant=\"column\">Payment List</Typography> */}\r\n                                </Grid>\r\n\r\n                                <Grid item>\r\n                                    <Button variant=\"contained\" onClick={() => addData()}>\r\n                                        <AddCircleOutlineOutlined sx={{ mr: 0.5 }} /> Add Payment\r\n                                    </Button>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <OutlinedInput\r\n                                        id=\"input-search-list-style1\"\r\n                                        placeholder=\"Search\"\r\n                                        startAdornment={\r\n                                            <InputAdornment position=\"start\">\r\n                                                <IconSearch stroke={1.5} size=\"1rem\" />\r\n                                            </InputAdornment>\r\n                                        }\r\n                                        size=\"small\"\r\n                                        onChange={handleSearch}\r\n                                        autoComplete=\"off\"\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                }\r\n                content={true}\r\n            >\r\n                <PaymentList search={search} invoiceID={invoiceID} callApi={callApi} />\r\n            </MainCard>\r\n\r\n            {/* Invoice Payment */}\r\n            {openAdd && (\r\n                <CenterDialog\r\n                    title={`Add Invoice Payment`}\r\n                    open={openAdd}\r\n                    onClose={() => setOpenAdd((prevState) => !prevState)}\r\n                    id=\"addPayment\"\r\n                    sx={{\r\n                        '&>div:nth-of-type(3)': {\r\n                            '&>div': {\r\n                                minWidth: { md: '40%', xs: '90%' }\r\n                            }\r\n                        }\r\n                    }}\r\n                >\r\n                    <AddEditPayment\r\n                        formId=\"addPayment\"\r\n                        invoiceData={invoiceData}\r\n                        currencyRateData={currencyRateData}\r\n                        onSubmit={submitHandler}\r\n                    />\r\n                </CenterDialog>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Index;\r\n","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M13 5v6h1.17L12 13.17 9.83 11H11V5h2m2-2H9v6H5l7 7 7-7h-4V3zm4 15H5v2h14v-2z\"\n}), 'GetAppOutlined');","import { AddCircleOutlineOutlined, DeleteOutline, DownloadOutlined, GetAppOutlined } from '@mui/icons-material';\r\nimport { Button, Grid, IconButton, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Tooltip } from '@mui/material';\r\nimport { AttachmentDeleteApi, AttachmentListApi, DownloadInvoiceAttachmentApi } from 'apis/Invoice';\r\nimport useAuth from 'hooks/useAuth';\r\nimport { useEffect } from 'react';\r\nimport { useState } from 'react';\r\nimport { gridSpacing } from 'store/constant';\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport { apiErrorSnackBar, apiSuccessSnackBar, apiValidationSnackBar } from 'utils/SnackBar';\r\nimport CenterDialog from 'views/utilities/CenterDialog';\r\nimport AddAttachment from './AddAttachment';\r\n\r\nconst params = {\r\n    invoice_id: 0\r\n};\r\n\r\nlet colCount = 0;\r\n\r\nconst Index = ({ invoiceID }) => {\r\n    const { checkRestriction } = useAuth();\r\n    const [attachmentData, setAttachmentData] = useState([]);\r\n    const [documentType, setDocumentType] = useState([]);\r\n    const [openAttachment, setOpenAttachment] = useState(false);\r\n    const [callApi, setCallApi] = useState(false);\r\n\r\n    const getData = () => {\r\n        AttachmentListApi(params)\r\n            .then((res) => {\r\n                setAttachmentData(res.data.data);\r\n            })\r\n            .catch((err) => {\r\n                apiErrorSnackBar(err);\r\n            });\r\n    };\r\n\r\n    useEffect(() => {\r\n        params.invoice_id = invoiceID;\r\n        getData();\r\n    }, [callApi]);\r\n\r\n    const submitHandler = () => {\r\n        setOpenAttachment((prevState) => !prevState);\r\n        setCallApi((prevState) => !prevState);\r\n    };\r\n\r\n    const downloadAttachment = (row) => {\r\n        const a = document.createElement('a');\r\n        a.href = row.base64_document;\r\n        a.download = row.document;\r\n        a.click();\r\n    };\r\n\r\n    const deleteAttachment = (row) => {\r\n        AttachmentDeleteApi({ id: row.id })\r\n            .then((res) => {\r\n                if (res.data && res.data.status === 1) {\r\n                    getData();\r\n                    apiSuccessSnackBar(res);\r\n                } else {\r\n                    apiValidationSnackBar(res);\r\n                }\r\n            })\r\n            .catch((err) => {\r\n                apiErrorSnackBar(err);\r\n            });\r\n    };\r\n\r\n    // ========== Download Invoice Attachments ========== //\r\n    const invoiceAttachmentsDownloadHandler = () => {\r\n        DownloadInvoiceAttachmentApi({ invoice_id: invoiceID })\r\n            .then((res) => {\r\n                const a = document.createElement('a');\r\n                a.href = res.data.data.zip;\r\n                a.download = res.data.data.file_name;\r\n                a.click();\r\n            })\r\n            .catch((err) => {\r\n                console.log(err);\r\n            });\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <MainCard\r\n                title={\r\n                    <Grid container alignItems=\"center\" spacing={gridSpacing} sx={{ mb: -1, mt: -4 }}>\r\n                        <Grid item xs={12}>\r\n                            <Grid container alignItems=\"center\" spacing={gridSpacing}>\r\n                                <Grid item sx={{ flexGrow: 1 }}>\r\n                                    {/* <Typography variant=\"column\">Payment List</Typography> */}\r\n                                </Grid>\r\n\r\n                                <Grid item>\r\n                                    {checkRestriction('CAN_DOWNLOAD_INVOICE_ALL_ATTACHMENT') && attachmentData.length > 1 && (\r\n                                        <Tooltip title=\"Download All Invoice Attachments\" arrow>\r\n                                            <IconButton\r\n                                                color=\"primary\"\r\n                                                component=\"label\"\r\n                                                onClick={() => invoiceAttachmentsDownloadHandler()}\r\n                                            >\r\n                                                <GetAppOutlined fontSize=\"small\" />\r\n                                            </IconButton>\r\n                                        </Tooltip>\r\n                                    )}\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Button variant=\"contained\" onClick={() => setOpenAttachment((prevState) => !prevState)}>\r\n                                        <AddCircleOutlineOutlined sx={{ mr: 0.5 }} /> Add Attachment\r\n                                    </Button>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                }\r\n                content={true}\r\n            >\r\n                <TableContainer>\r\n                    <Table size=\"small\">\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell sx={{ width: '40%' }}>File Name</TableCell>\r\n                                <TableCell sx={{ width: '40%' }}>Document Type</TableCell>\r\n                                <TableCell align=\"right\" sx={{ width: '20%' }}>\r\n                                    Action\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {attachmentData.map((i, idx) => (\r\n                                <TableRow key={idx}>\r\n                                    <TableCell>{i.file_name}</TableCell>\r\n                                    <TableCell>{i.doc_type_name}</TableCell>\r\n                                    <TableCell align=\"right\">\r\n                                        {checkRestriction('CAN_DOWNLOAD_INVOICE_ATTACHMENT') && (\r\n                                            <IconButton color=\"secondary\" component=\"label\" onClick={() => downloadAttachment(i)}>\r\n                                                <DownloadOutlined fontSize=\"small\" />\r\n                                            </IconButton>\r\n                                        )}\r\n                                        {checkRestriction('CAN_DELETE_INVOICE_ATTACHMENT') && (\r\n                                            <IconButton color=\"error\" component=\"label\" onClick={() => deleteAttachment(i)}>\r\n                                                <DeleteOutline fontSize=\"small\" />\r\n                                            </IconButton>\r\n                                        )}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </MainCard>\r\n\r\n            {openAttachment && (\r\n                <CenterDialog\r\n                    title={`Add Attachment`}\r\n                    open={openAttachment}\r\n                    onClose={() => setOpenAttachment((prevState) => !prevState)}\r\n                    id=\"addAttachment\"\r\n                >\r\n                    <AddAttachment\r\n                        attNo={attachmentData.length}\r\n                        formID=\"addAttachment\"\r\n                        onSubmit={submitHandler}\r\n                        invoiceID={invoiceID}\r\n                        initList={documentType}\r\n                    />\r\n                </CenterDialog>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Index;\r\n","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon([/*#__PURE__*/_jsx(\"path\", {\n  d: \"M18 2h-8L4 8v12c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm0 2v16H6V8.83L10.83 4H18z\"\n}, \"0\"), /*#__PURE__*/_jsx(\"path\", {\n  d: \"m16 13-4 4-4-4 1.41-1.41L11 13.17V9.02L13 9v4.17l1.59-1.59L16 13z\"\n}, \"1\")], 'SimCardDownloadOutlined');","import propTypes from 'prop-types';\r\nimport { Card, CardContent, CardHeader, Popper, Typography } from '@mui/material';\r\nimport { useTheme } from '@mui/system';\r\nimport { useEffect, useState } from 'react';\r\n\r\nexport default function TitlePopper({ open, title, itemList }) {\r\n    const theme = useTheme();\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n    useEffect(() => {\r\n        setAnchorEl(anchorEl ? null : open);\r\n    }, [open]);\r\n\r\n    const display = Boolean(anchorEl);\r\n    const id = display ? 'simple-popper' : undefined;\r\n\r\n    return (\r\n        <div>\r\n            <Popper id={id} open={display} anchorEl={anchorEl}>\r\n                <Card variant=\"outlined\">\r\n                    <CardHeader\r\n                        title={<Typography sx={{ color: '#FFFFFF' }}>{title}</Typography>}\r\n                        sx={{ padding: '15px', backgroundColor: theme.palette.primary[800] }}\r\n                    />\r\n                    <CardContent sx={{ padding: '10px' }}>\r\n                        {itemList.map((i, idx) => (\r\n                            <Typography key={idx} variant=\"subtitle1\">\r\n                                {itemList[idx]}\r\n                            </Typography>\r\n                        ))}\r\n                    </CardContent>\r\n                </Card>\r\n            </Popper>\r\n        </div>\r\n    );\r\n}\r\n\r\nTitlePopper.propTypes = {\r\n    open: propTypes.any,\r\n    title: propTypes.string.isRequired,\r\n    itemList: propTypes.array\r\n};\r\n","import {\r\n    Chip,\r\n    IconButton,\r\n    Link,\r\n    MenuItem,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableFooter,\r\n    TableHead,\r\n    TablePagination,\r\n    TableRow,\r\n    TableSortLabel,\r\n    Tooltip,\r\n    Typography\r\n} from '@mui/material';\r\nimport { DownloadInvoiceApi, DuplicateInvoiceApi, InitPaymentApi, InvoiceDeleteApi, InvoiceInitApi, InvoiceListApi } from 'apis/Invoice';\r\nimport useAuth from 'hooks/useAuth';\r\nimport propTypes from 'prop-types';\r\nimport { useEffect, useState } from 'react';\r\nimport CommonDialog from 'utils/CommonDialog';\r\nimport { apiErrorSnackBar, apiSuccessSnackBar, apiValidationSnackBar } from 'utils/SnackBar';\r\nimport CenterDialog from 'views/utilities/CenterDialog';\r\nimport DeleteDialog from 'views/utilities/DeleteDialog';\r\nimport AddEditInvoice from './AddEditInvoice';\r\nimport ViewInvoice from './ViewInvoice';\r\nimport PaymentIndex from './payment/index';\r\nimport AttachmentIndex from './attachment/index';\r\nimport { ContentCopyOutlined, DeleteOutline, Edit as EditIcon, GetAppOutlined, SimCardDownloadOutlined } from '@mui/icons-material';\r\nimport moment from 'moment';\r\nimport AddAttachment from './attachment/AddAttachment';\r\nimport AddEditPayment from './payment/AddEditPayment';\r\nimport TitlePopper from 'views/utilities/TitlePopper';\r\n\r\nconst params = {\r\n    search: '',\r\n    displayLength: 10,\r\n    displayStart: 0,\r\n    orderDir: 'ASC',\r\n    orderColumn: 0,\r\n    client_id: '0',\r\n    invoice_amount: '0',\r\n    status: '0',\r\n    is_due: false,\r\n    from_date: null,\r\n    to_date: null\r\n};\r\n\r\nlet recordsTotal = 0;\r\n\r\nconst InvoiceList = ({ search, callApi, initData, filter, setIsLoading, setWidgets }) => {\r\n    const { checkRestriction, recall } = useAuth();\r\n    const [data, setData] = useState([]);\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(10);\r\n    const [order, setOrder] = useState('desc');\r\n    const [orderBy, setOrderBy] = useState('0');\r\n    const [openEdit, setOpenEdit] = useState(false);\r\n    const [openDelete, setOpenDelete] = useState(false);\r\n    const [openView, setOpenView] = useState(false);\r\n    const [openInvoicePayment, setOpenInvoicePayment] = useState(false);\r\n    const [invoiceData, setInvoiceData] = useState({});\r\n    const [paymentInvoiceData, setPaymentInvoiceData] = useState({});\r\n    const [footerData, setFooterData] = useState({});\r\n    const [openAttachment, setOpenAttachment] = useState(false);\r\n    const [openAttachmentList, setOpenAttachmentList] = useState(false);\r\n    const [openPayment, setOpenPayment] = useState(false);\r\n    const [iVStatusPopper, setIVStatusPopper] = useState(null);\r\n    const [iVUpdateAtPopper, setIVUpdateAtPopper] = useState(null);\r\n    const [currencyRateData, setCurrencyRate] = useState({});\r\n\r\n    // ========== Table Pagination ========== //\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n\r\n    const handleRequestSort = (property) => {\r\n        const isAsc = orderBy === property && order === 'asc';\r\n        setOrder(isAsc ? 'desc' : 'asc');\r\n        setOrderBy(property);\r\n    };\r\n\r\n    const getData = () => {\r\n        InvoiceListApi(params)\r\n            .then((res) => {\r\n                recordsTotal = res.data.data.totalCount;\r\n                setData(res.data.data.data);\r\n                setWidgets(res.data.data.widgets);\r\n                setFooterData(res.data.data.footerTotal);\r\n                setIsLoading(false);\r\n            })\r\n            .catch((err) => {\r\n                apiErrorSnackBar(err);\r\n            });\r\n    };\r\n\r\n    useEffect(() => {\r\n        params.search = search;\r\n        params.displayLength = rowsPerPage;\r\n        params.displayStart = rowsPerPage * page;\r\n        params.orderDir = order?.toUpperCase() ?? params.orderDir;\r\n        params.orderColumn = Number(orderBy);\r\n        params.client_id = filter.filterClientID;\r\n        params.status = filter.filterStatus;\r\n        params.from_date = filter.filterFromDate;\r\n        params.to_date = filter.filterToDate;\r\n        getData();\r\n    }, [page, rowsPerPage, order, orderBy, search, callApi, recall]);\r\n\r\n    // ========== Edit ========== //\r\n    const editData = (row) => {\r\n        InvoiceInitApi({ type: 'edit', id: row.id })\r\n            .then((res) => {\r\n                setOpenEdit((prevState) => !prevState);\r\n                setInvoiceData(res.data.data);\r\n            })\r\n            .catch((err) => {\r\n                apiErrorSnackBar(err);\r\n            });\r\n    };\r\n\r\n    const submitHandler = () => {\r\n        setOpenEdit((prevState) => !prevState);\r\n        getData();\r\n    };\r\n    const attachmentSubmitHandler = () => {\r\n        setOpenAttachment((prevState) => !prevState);\r\n        getData();\r\n    };\r\n\r\n    // ========== Duplicate Invoice ========== //\r\n    const duplicateInvoice = (id) => {\r\n        const obj = { id: id };\r\n        DuplicateInvoiceApi(obj)\r\n            .then((res) => {\r\n                if (res.data && res.data.status === 1) {\r\n                    getData();\r\n                    apiSuccessSnackBar(res);\r\n                } else {\r\n                    apiValidationSnackBar(res);\r\n                }\r\n            })\r\n            .catch((err) => {\r\n                apiErrorSnackBar(err);\r\n            });\r\n    };\r\n\r\n    // ========== Delete ========== //\r\n    const deleteData = (row) => {\r\n        setOpenDelete(true);\r\n        setInvoiceData(row);\r\n    };\r\n\r\n    const deleteHandler = () => {\r\n        InvoiceDeleteApi({ id: invoiceData.id })\r\n            .then((res) => {\r\n                if (res.data && res.data.status === 1) {\r\n                    setPage(0);\r\n                    getData();\r\n                    setOpenDelete(false);\r\n                    apiSuccessSnackBar(res);\r\n                } else {\r\n                    apiValidationSnackBar(res);\r\n                }\r\n            })\r\n            .catch((err) => {\r\n                apiErrorSnackBar(err);\r\n            });\r\n    };\r\n\r\n    // ========== View ========== //\r\n    const viewData = (row) => {\r\n        InvoiceInitApi({ type: 'view', id: row.id })\r\n            .then((res) => {\r\n                setOpenView((prevState) => !prevState);\r\n                setInvoiceData(res.data.data);\r\n            })\r\n            .catch((err) => {\r\n                apiErrorSnackBar(err);\r\n            });\r\n    };\r\n\r\n    // ========== Invoice Payment ========== //\r\n    const invoicePaymentData = (row) => {\r\n        setInvoiceData(row);\r\n        if (row.has_payment) {\r\n            setOpenInvoicePayment((prevState) => !prevState);\r\n        } else {\r\n            InitPaymentApi({ type: 'add', invoice_id: row.id })\r\n                .then((res) => {\r\n                    setPaymentInvoiceData(res.data.data.invoiceData);\r\n                    setCurrencyRate(res.data.data.currency_rate);\r\n                    // setOpenAdd((prevState) => !prevState);\r\n                    setOpenPayment((prevState) => !prevState);\r\n                })\r\n                .catch((err) => {\r\n                    apiErrorSnackBar(err);\r\n                });\r\n        }\r\n    };\r\n\r\n    const paymentSubmitHandler = () => {\r\n        setOpenPayment((prevState) => !prevState);\r\n        getData();\r\n    };\r\n\r\n    // ========== Download Invoice ========== //\r\n    const invoiceDownload = (row) => {\r\n        DownloadInvoiceApi({ invoice_id: row.id })\r\n            .then((res) => {\r\n                const a = document.createElement('a');\r\n                a.href = res.data.data.invoice;\r\n                a.download = res.data.data.invoice_name;\r\n                a.click();\r\n            })\r\n            .catch((err) => {\r\n                console.error(err);\r\n            });\r\n    };\r\n\r\n    // ========== Download Invoice Attachments ========== //\r\n    // const invoiceAttachmentsDownloadHandler = (row) => {\r\n    //     DownloadInvoiceAttachmentApi({ invoice_id: row.id })\r\n    //         .then((res) => {\r\n    //             const a = document.createElement('a');\r\n    //             a.href = res.data.data.zip;\r\n    //             a.download = res.data.data.file_name;\r\n    //             a.click();\r\n    //         })\r\n    //         .catch((err) => {\r\n    //             console.log(err);\r\n    //         });\r\n    // };\r\n\r\n    const invoiceStatusChip = (status) => {\r\n        switch (status) {\r\n            case 'Due':\r\n                return 'warning';\r\n            case 'Partial':\r\n                return 'primary';\r\n            case 'Paid':\r\n                return 'secondary';\r\n            case 'Bad Debt':\r\n                return 'error';\r\n            default:\r\n                return 'default';\r\n        }\r\n    };\r\n\r\n    const attachmentsHandler = (row) => {\r\n        setInvoiceData(row);\r\n        if (row.has_attachment) {\r\n            setOpenAttachmentList((prevState) => !prevState);\r\n        } else {\r\n            setOpenAttachment((prevState) => !prevState);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <TableContainer>\r\n                <Table>\r\n                    <EnhancedTableHead order={order} orderBy={orderBy} onRequestSort={handleRequestSort} />\r\n                    <TableBody>\r\n                        {data.map((i, idx) => (\r\n                            <TableRow key={idx}>\r\n                                <TableCell>\r\n                                    {checkRestriction('CAN_VIEW_INVOICE') ? (\r\n                                        <Link\r\n                                            underline=\"none\"\r\n                                            sx={{\r\n                                                cursor: 'pointer'\r\n                                            }}\r\n                                            onClick={() => viewData(i)}\r\n                                        >\r\n                                            {i.invoice_no}\r\n                                        </Link>\r\n                                    ) : (\r\n                                        i.invoice_no\r\n                                    )}\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    {i.client_company}\r\n                                    <Typography variant=\"subtitle2\">{i.client_name}</Typography>\r\n                                </TableCell>\r\n                                <TableCell>{i.invoice_date}</TableCell>\r\n                                {/* <TableCell align=\"right\">{i.invoice_currency_total_amount}</TableCell> */}\r\n                                <TableCell align=\"right\">\r\n                                    {i.subtotal}\r\n                                    {i.is_discount && <Typography variant=\"subtitle2\">Discount - {i.total_discount}</Typography>}\r\n                                </TableCell>\r\n                                <TableCell align=\"right\">{i.total_tax_amount}</TableCell>\r\n                                <TableCell align=\"right\">{i.currency_conversion_rate}</TableCell>\r\n                                <TableCell align=\"right\">{i.company_currency_total_amount}</TableCell>\r\n                                <TableCell align=\"right\">{i.company_currency_amount_received}</TableCell>\r\n                                <TableCell>{i.is_bifurcated}</TableCell>\r\n                                <TableCell>\r\n                                    <Chip\r\n                                        color={invoiceStatusChip(i.invoice_status)}\r\n                                        label={i.invoice_status}\r\n                                        onClick={() => invoicePaymentData(i)}\r\n                                        onMouseEnter={(e) => {\r\n                                            i.has_payment && setIVStatusPopper(e.currentTarget);\r\n                                            i.has_payment && setInvoiceData(i);\r\n                                        }}\r\n                                        onMouseLeave={() => setIVStatusPopper(null)}\r\n                                    />\r\n                                </TableCell>\r\n\r\n                                <TableCell>\r\n                                    <Typography\r\n                                        onClick={() => attachmentsHandler(i)}\r\n                                        sx={{ cursor: 'pointer' }}\r\n                                        onMouseEnter={(e) => {\r\n                                            i.has_attachment && setIVUpdateAtPopper(e.currentTarget);\r\n                                            i.has_attachment && setInvoiceData(i);\r\n                                        }}\r\n                                        onMouseLeave={() => setIVUpdateAtPopper(null)}\r\n                                    >\r\n                                        {i.last_attachment_date !== null ? moment(i.last_attachment_date).format('YYYY-MM-DD') : '-'}\r\n                                    </Typography>\r\n                                </TableCell>\r\n                                <TableCell align=\"right\">\r\n                                    {/* {checkRestriction('CAN_DOWNLOAD_INVOICE_ALL_ATTACHMENT') && i.has_attachment === true && (\r\n                                        <Tooltip title=\"Download Invoice Attachments\" arrow>\r\n                                            <IconButton\r\n                                                color=\"primary\"\r\n                                                component=\"label\"\r\n                                                onClick={() => invoiceAttachmentsDownloadHandler(i)}\r\n                                            >\r\n                                                <GetAppOutlined fontSize=\"small\" />\r\n                                            </IconButton>\r\n                                        </Tooltip>\r\n                                    )} */}\r\n                                    {checkRestriction('CAN_EDIT_INVOICE') && (\r\n                                        <Tooltip title=\"Edit\" arrow>\r\n                                            <IconButton color=\"primary\" component=\"label\" onClick={() => editData(i)}>\r\n                                                <EditIcon fontSize=\"small\" />\r\n                                            </IconButton>\r\n                                        </Tooltip>\r\n                                    )}\r\n\r\n                                    <Tooltip title=\"Duplicate\" arrow>\r\n                                        <IconButton color=\"secondary\" component=\"label\" onClick={() => duplicateInvoice(i.id)}>\r\n                                            <ContentCopyOutlined fontSize=\"small\" />\r\n                                        </IconButton>\r\n                                    </Tooltip>\r\n                                    {checkRestriction('CAN_DELETE_INVOICE') && (\r\n                                        <Tooltip title=\"Delete\" arrow>\r\n                                            <IconButton color=\"error\" component=\"label\" onClick={() => deleteData(i)}>\r\n                                                <DeleteOutline fontSize=\"small\" />\r\n                                            </IconButton>\r\n                                        </Tooltip>\r\n                                    )}\r\n                                    {checkRestriction('CAN_DOWNLOAD_INVOICE') && (\r\n                                        <Tooltip title=\"Download Invoice\" arrow>\r\n                                            <IconButton color=\"primary\" component=\"label\" onClick={() => invoiceDownload(i)}>\r\n                                                <SimCardDownloadOutlined fontSize=\"small\" />\r\n                                            </IconButton>\r\n                                        </Tooltip>\r\n                                    )}\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                    </TableBody>\r\n                    <TableFooter>\r\n                        <TableRow>\r\n                            <TableCell>\r\n                                <Typography>Invoice Number</Typography>\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                <Typography>Client</Typography>\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                <Typography>Date</Typography>\r\n                            </TableCell>\r\n                            <TableCell align=\"right\">\r\n                                <Typography>Amount</Typography>\r\n                            </TableCell>\r\n                            <TableCell align=\"right\">\r\n                                <Typography>Total Tax</Typography>\r\n                            </TableCell>\r\n                            <TableCell align=\"right\">\r\n                                <Typography>CCR</Typography>\r\n                            </TableCell>\r\n                            <TableCell align=\"right\">\r\n                                <Typography>{footerData?.total ? <b>{footerData.total}</b> : 'Total'}</Typography>\r\n                            </TableCell>\r\n                            <TableCell align=\"right\">\r\n                                <Typography>\r\n                                    {footerData?.received_amount ? <b>{footerData.received_amount}</b> : 'Received Amount'}\r\n                                </Typography>\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                <Typography>Is Bifurcated?</Typography>\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                <Typography>Status</Typography>\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                <Typography>Updated At</Typography>\r\n                            </TableCell>\r\n                            <TableCell align=\"right\">\r\n                                <Typography>Action</Typography>\r\n                            </TableCell>\r\n                        </TableRow>\r\n                    </TableFooter>\r\n                </Table>\r\n            </TableContainer>\r\n            <TablePagination\r\n                rowsPerPageOptions={[10, 25, 50, 100]}\r\n                component=\"div\"\r\n                count={Number(recordsTotal)}\r\n                rowsPerPage={rowsPerPage}\r\n                page={page}\r\n                onPageChange={handleChangePage}\r\n                onRowsPerPageChange={handleChangeRowsPerPage}\r\n            />\r\n\r\n            {/* {iVStatusPopper && (\r\n                <TitlePopper\r\n                    open={iVStatusPopper}\r\n                    title={'Payments'}\r\n                    itemList={['20-Nov-2022 | Demo| 454554', '20-Nov-2022 | Demo| 4545545645645645']}\r\n                />\r\n            )} */}\r\n            {iVStatusPopper && <TitlePopper open={iVStatusPopper} title={'Invoice Payments'} itemList={invoiceData.payment_list} />}\r\n            {iVUpdateAtPopper && <TitlePopper open={iVUpdateAtPopper} title={'Attachments'} itemList={invoiceData.attached_list} />}\r\n\r\n            {/* Invoice View */}\r\n            {openView && (\r\n                <CommonDialog\r\n                    open={openView}\r\n                    title={`View - ${invoiceData.invoice['invoice_no']}`}\r\n                    onClose={() => {\r\n                        setOpenView((prevState) => !prevState);\r\n                        getData();\r\n                    }}\r\n                    saveButton={true}\r\n                    sx={{\r\n                        '& .MuiDialog-container ': {\r\n                            justifyContent: 'flex-end',\r\n                            '& .MuiPaper-root': {\r\n                                m: 0,\r\n                                p: 0,\r\n                                borderRadius: '0px',\r\n                                minWidth: { sm: '70%', xs: '100%' },\r\n                                minHeight: '100%'\r\n                            }\r\n                        }\r\n                    }}\r\n                >\r\n                    <ViewInvoice invoiceData={invoiceData} />\r\n                </CommonDialog>\r\n            )}\r\n\r\n            {/* Invoice Edit */}\r\n            {openEdit && (\r\n                <CommonDialog\r\n                    open={openEdit}\r\n                    title={`Edit Invoice - ${invoiceData.invoice['invoice_no']}`}\r\n                    onClose={() => setOpenEdit((prevState) => !prevState)}\r\n                    id=\"editInvoice\"\r\n                    sx={{\r\n                        '& .MuiDialog-container ': {\r\n                            justifyContent: 'flex-end',\r\n                            '& .MuiPaper-root': {\r\n                                m: 0,\r\n                                p: 0,\r\n                                borderRadius: '0px',\r\n                                minWidth: { sm: '70%', xs: '100%' },\r\n                                minHeight: '100%'\r\n                            }\r\n                        }\r\n                    }}\r\n                >\r\n                    <AddEditInvoice value={invoiceData} formId=\"editInvoice\" onSubmit={submitHandler} />\r\n                </CommonDialog>\r\n            )}\r\n\r\n            {/* Invoice Delete */}\r\n            {openDelete && (\r\n                <DeleteDialog\r\n                    onDeleteHandler={deleteHandler}\r\n                    onClose={() => setOpenDelete(false)}\r\n                    open={openDelete}\r\n                    dept=\"invoice\"\r\n                    name={invoiceData['invoice_no']}\r\n                />\r\n            )}\r\n\r\n            {/* Invoice Payment */}\r\n            {openInvoicePayment && (\r\n                <CenterDialog\r\n                    title={`Invoice Payment List - ${invoiceData['invoice_no']}`}\r\n                    open={openInvoicePayment}\r\n                    onClose={() => {\r\n                        setOpenInvoicePayment((prevState) => !prevState);\r\n                        getData();\r\n                    }}\r\n                    id=\"addAttachment\"\r\n                    saveButton={true}\r\n                    sx={{\r\n                        '&>div:nth-of-type(3)': {\r\n                            '&>div': {\r\n                                minWidth: { md: '70%', xs: '90%' }\r\n                            }\r\n                        }\r\n                    }}\r\n                >\r\n                    <PaymentIndex formID=\"addAttachment\" invoiceID={invoiceData['id']} />\r\n                </CenterDialog>\r\n            )}\r\n\r\n            {/* Open Attachment */}\r\n            {openAttachment && (\r\n                <CenterDialog\r\n                    title={`Add Attachment - ${invoiceData['invoice_no']}`}\r\n                    open={openAttachment}\r\n                    onClose={() => setOpenAttachment((prevState) => !prevState)}\r\n                    id=\"addAttachment\"\r\n                >\r\n                    <AddAttachment attNo={0} formID=\"addAttachment\" onSubmit={attachmentSubmitHandler} invoiceID={invoiceData.id} />\r\n                </CenterDialog>\r\n            )}\r\n\r\n            {openAttachmentList && (\r\n                <CenterDialog\r\n                    title={`Invoice Attachment List - ${invoiceData['invoice_no']}`}\r\n                    open={openAttachmentList}\r\n                    onClose={() => {\r\n                        setOpenAttachmentList((prevState) => !prevState);\r\n                        getData();\r\n                    }}\r\n                    saveButton={true}\r\n                    sx={{\r\n                        '&>div:nth-of-type(3)': {\r\n                            '&>div': {\r\n                                minWidth: { md: '50%', xs: '90%' }\r\n                            }\r\n                        }\r\n                    }}\r\n                >\r\n                    <AttachmentIndex invoiceID={invoiceData['id']} />\r\n                </CenterDialog>\r\n            )}\r\n\r\n            {/* Invoice Payment */}\r\n            {openPayment && (\r\n                <CenterDialog\r\n                    title={`Add Invoice Payment - ${invoiceData['invoice_no']}`}\r\n                    open={openPayment}\r\n                    onClose={() => setOpenPayment((prevState) => !prevState)}\r\n                    id=\"addPayment\"\r\n                    sx={{\r\n                        '&>div:nth-of-type(3)': {\r\n                            '&>div': {\r\n                                minWidth: { md: '40%', xs: '90%' }\r\n                            }\r\n                        }\r\n                    }}\r\n                >\r\n                    <AddEditPayment\r\n                        formId=\"addPayment\"\r\n                        invoiceData={paymentInvoiceData}\r\n                        currencyRateData={currencyRateData}\r\n                        onSubmit={paymentSubmitHandler}\r\n                    />\r\n                </CenterDialog>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nInvoiceList.propTypes = {\r\n    search: propTypes.string,\r\n    callApi: propTypes.bool,\r\n    initData: propTypes.object,\r\n    filter: propTypes.object,\r\n    setIsLoading: propTypes.func,\r\n    setWidgets: propTypes.func\r\n};\r\n\r\nexport default InvoiceList;\r\n\r\nfunction EnhancedTableHead({ order, orderBy, onRequestSort }) {\r\n    const createSortHandler = (property) => () => {\r\n        onRequestSort(property);\r\n    };\r\n    return (\r\n        <TableHead>\r\n            <TableRow>\r\n                <TableCell key=\"invoice_number\">\r\n                    <TableSortLabel active={orderBy === '0'} direction={orderBy === '0' ? order : 'asc'} onClick={createSortHandler('0')}>\r\n                        Invoice Number\r\n                    </TableSortLabel>\r\n                </TableCell>\r\n                <TableCell key=\"Client\">\r\n                    <TableSortLabel active={orderBy === '1'} direction={orderBy === '1' ? order : 'asc'} onClick={createSortHandler('1')}>\r\n                        Client\r\n                    </TableSortLabel>\r\n                </TableCell>\r\n                <TableCell key=\"date\">\r\n                    <TableSortLabel active={orderBy === '2'} direction={orderBy === '2' ? order : 'asc'} onClick={createSortHandler('2')}>\r\n                        Date\r\n                    </TableSortLabel>\r\n                </TableCell>\r\n                <TableCell key=\"amount\" align=\"right\">\r\n                    <TableSortLabel active={orderBy === '3'} direction={orderBy === '3' ? order : 'asc'} onClick={createSortHandler('3')}>\r\n                        Amount\r\n                    </TableSortLabel>\r\n                </TableCell>\r\n                <TableCell key=\"total_tax\" align=\"right\">\r\n                    <TableSortLabel active={orderBy === '4'} direction={orderBy === '4' ? order : 'asc'} onClick={createSortHandler('4')}>\r\n                        Total Tax\r\n                    </TableSortLabel>\r\n                </TableCell>\r\n                <TableCell key=\"ccr\" align=\"right\">\r\n                    <TableSortLabel active={orderBy === '5'} direction={orderBy === '5' ? order : 'asc'} onClick={createSortHandler('5')}>\r\n                        CCR\r\n                    </TableSortLabel>\r\n                </TableCell>\r\n\r\n                <TableCell key=\"total\" align=\"right\">\r\n                    <TableSortLabel active={orderBy === '6'} direction={orderBy === '6' ? order : 'asc'} onClick={createSortHandler('6')}>\r\n                        Total\r\n                    </TableSortLabel>\r\n                </TableCell>\r\n                <TableCell key=\"received_amount\" align=\"right\">\r\n                    <TableSortLabel active={orderBy === '7'} direction={orderBy === '7' ? order : 'asc'} onClick={createSortHandler('7')}>\r\n                        Received Amount\r\n                    </TableSortLabel>\r\n                </TableCell>\r\n                <TableCell key=\"is_bifurcated\">\r\n                    <TableSortLabel active={orderBy === '8'} direction={orderBy === '8' ? order : 'asc'} onClick={createSortHandler('8')}>\r\n                        Is Bifurcated?\r\n                    </TableSortLabel>\r\n                </TableCell>\r\n                <TableCell key=\"status\">\r\n                    <TableSortLabel active={orderBy === '9'} direction={orderBy === '9' ? order : 'asc'} onClick={createSortHandler('9')}>\r\n                        Status\r\n                    </TableSortLabel>\r\n                </TableCell>\r\n                <TableCell key=\"updated_at\">\r\n                    <TableSortLabel\r\n                        active={orderBy === '10'}\r\n                        direction={orderBy === '10' ? order : 'asc'}\r\n                        onClick={createSortHandler('10')}\r\n                    >\r\n                        Updated At\r\n                    </TableSortLabel>\r\n                </TableCell>\r\n\r\n                <TableCell key=\"action\" align=\"right\">\r\n                    Action\r\n                </TableCell>\r\n            </TableRow>\r\n        </TableHead>\r\n    );\r\n}\r\n// ========== PropTypes ========== //\r\n\r\nEnhancedTableHead.propTypes = {\r\n    order: propTypes.string,\r\n    orderBy: propTypes.string,\r\n    onRequestSort: propTypes.func\r\n};\r\n","import { AddCircleOutlineOutlined, FilterAlt } from '@mui/icons-material';\r\nimport { Button, ButtonBase, Grid, InputAdornment, MenuItem, OutlinedInput, TextField, Typography, useTheme } from '@mui/material';\r\nimport { DesktopDatePicker, LocalizationProvider } from '@mui/x-date-pickers';\r\nimport { AdapterMoment } from '@mui/x-date-pickers/AdapterMoment';\r\nimport { IconSearch } from '@tabler/icons';\r\nimport { InvoiceInitApi } from 'apis/Invoice';\r\nimport useAuth from 'hooks/useAuth';\r\nimport moment from 'moment';\r\nimport { useEffect } from 'react';\r\nimport { useTransition } from 'react';\r\nimport { useState } from 'react';\r\nimport { gridSpacing } from 'store/constant';\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport Transitions from 'ui-component/extended/Transitions';\r\nimport CommonDialog from 'utils/CommonDialog';\r\nimport { apiErrorSnackBar, apiValidationSnackBar } from 'utils/SnackBar';\r\nimport AddEditInvoice from './AddEditInvoice';\r\nimport PrimaryDarkCard from './invoiceCard/PrimaryDarkCard';\r\nimport SecondaryDarkCard from './invoiceCard/SecondaryDarkCard';\r\nimport InvoiceList from './InvoiceList';\r\n\r\nconst initialFilter = {\r\n    filterFromDate: null,\r\n    filterToDate: null,\r\n    filterClientID: '0',\r\n    filterInvoiceAmount: '0',\r\n    filterStatus: '0'\r\n};\r\n\r\nconst Index = () => {\r\n    const theme = useTheme();\r\n    const { checkRestriction, checkCompany, company, recall } = useAuth();\r\n    const [initData, setInitData] = useState({});\r\n    const [invoiceInitData, setInvoiceInitData] = useState({});\r\n    const [search, setSearch] = useState('');\r\n    const [filterOpen, setFilterOpen] = useState(false);\r\n    const [filter, setFilter] = useState(initialFilter);\r\n    const [openAdd, setOpenAdd] = useState(false);\r\n    const [callApi, setCallApi] = useState(false);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [widgets, setWidgets] = useState({});\r\n    const [, startTransition] = useTransition();\r\n\r\n    const handleSearch = (event) => {\r\n        startTransition(() => setSearch(event.target.value));\r\n    };\r\n\r\n    const addData = () => {\r\n        if (company.company_id !== '0') {\r\n            InvoiceInitApi({ type: 'add' })\r\n                .then((res) => {\r\n                    if (res.data && res.data.status === 1) {\r\n                        setInvoiceInitData(res.data.data);\r\n                        setOpenAdd((prevState) => !prevState);\r\n                        // apiSuccessSnackBar(res);\r\n                    } else {\r\n                        apiValidationSnackBar(res);\r\n                    }\r\n                })\r\n                .catch((err) => {\r\n                    apiErrorSnackBar(err);\r\n                });\r\n        } else {\r\n            checkCompany();\r\n        }\r\n    };\r\n\r\n    const submitHandler = () => {\r\n        setOpenAdd((prevState) => !prevState);\r\n        setCallApi((prevState) => !prevState);\r\n    };\r\n\r\n    const openFilter = () => {\r\n        setFilterOpen((prevState) => !prevState);\r\n    };\r\n\r\n    const handleFilter = (key, event) => {\r\n        if (key !== 'reset') {\r\n            const newString = event;\r\n            setFilter({ ...filter, [key]: newString });\r\n        } else {\r\n            setFilter({ ...initialFilter });\r\n        }\r\n        setCallApi((prevState) => !prevState);\r\n    };\r\n\r\n    /*******************************************************************************\r\n     * Initial api call\r\n     *******************************************************************************/\r\n    useEffect(() => {\r\n        InvoiceInitApi()\r\n            .then((res) => {\r\n                setInitData(res.data.data);\r\n            })\r\n            .catch((err) => console.log(err));\r\n    }, [recall]);\r\n\r\n    return (\r\n        <>\r\n            <Grid container spacing={gridSpacing}>\r\n                <Grid item xs={12}>\r\n                    <Grid container spacing={gridSpacing}>\r\n                        <Grid item sm={6} xs={12} md={6} lg={4}>\r\n                            <PrimaryDarkCard\r\n                                isLoading={isLoading}\r\n                                title=\"Total Invoices\"\r\n                                count={widgets?.TotalInvoiceCount}\r\n                                amount={widgets?.TotalInvoiceAmount}\r\n                                handleFilter={handleFilter}\r\n                                status={'0'}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item sm={6} xs={12} md={6} lg={4}>\r\n                            <SecondaryDarkCard\r\n                                isLoading={isLoading}\r\n                                title=\"Partial Paid Invoices\"\r\n                                count={widgets?.TotalPartialCount}\r\n                                amount={widgets?.TotalPartialAmount}\r\n                                handleFilter={handleFilter}\r\n                                status={'Partial'}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item sm={6} xs={12} md={6} lg={4}>\r\n                            <PrimaryDarkCard\r\n                                isLoading={isLoading}\r\n                                title=\"Over Due Invoices\"\r\n                                count={widgets?.TotalOverDueCount}\r\n                                amount={widgets?.TotalOverDueAmount}\r\n                                handleFilter={handleFilter}\r\n                                status={'Over Due'}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item sm={6} xs={12} md={6} lg={4}>\r\n                            <SecondaryDarkCard\r\n                                isLoading={isLoading}\r\n                                title=\"Unpaid Invoices\"\r\n                                count={widgets?.TotalUnPaidCount}\r\n                                amount={widgets?.TotalUnPaidAmount}\r\n                                handleFilter={handleFilter}\r\n                                status={'Unpaid'}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item sm={6} xs={12} md={6} lg={4}>\r\n                            <PrimaryDarkCard\r\n                                isLoading={isLoading}\r\n                                title=\"Paid Invoices\"\r\n                                count={widgets?.TotalPaidCount}\r\n                                amount={widgets?.TotalPaidAmount}\r\n                                handleFilter={handleFilter}\r\n                                status={'Paid'}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item sm={6} xs={12} md={6} lg={4}>\r\n                            <SecondaryDarkCard\r\n                                isLoading={isLoading}\r\n                                title=\"Bad Debt\"\r\n                                count={widgets?.TotalBadDeptCount}\r\n                                amount={widgets?.TotalBadDeptAmount}\r\n                                handleFilter={handleFilter}\r\n                                status={'Bad Debt'}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid item xs={12}></Grid>\r\n            </Grid>\r\n            <MainCard\r\n                title={\r\n                    <Grid container alignItems=\"center\" spacing={gridSpacing} sx={{ mb: -1, mt: -4 }}>\r\n                        <Grid item xs={12}>\r\n                            <Grid container alignItems=\"center\" spacing={gridSpacing}>\r\n                                <Grid item sx={{ flexGrow: 1 }}>\r\n                                    <Typography variant=\"column\">Invoice List</Typography>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <ButtonBase\r\n                                        disableRipple\r\n                                        onClick={() => {\r\n                                            openFilter();\r\n                                        }}\r\n                                    >\r\n                                        {JSON.stringify(filter) !== JSON.stringify(initialFilter) ? (\r\n                                            <FilterAlt sx={{ fontWeight: 500, color: 'secondary.dark' }} />\r\n                                        ) : (\r\n                                            <FilterAlt sx={{ fontWeight: 500, color: 'secondary.200' }} />\r\n                                        )}\r\n\r\n                                        <Typography variant=\"h5\" sx={{ mt: 0.5 }}>\r\n                                            Filter\r\n                                        </Typography>\r\n                                    </ButtonBase>\r\n                                </Grid>\r\n                                {checkRestriction('CAN_ADD_INVOICE') && (\r\n                                    <Grid item>\r\n                                        <Button variant=\"contained\" onClick={() => addData()}>\r\n                                            <AddCircleOutlineOutlined sx={{ mr: 0.5 }} /> Add Invoice\r\n                                        </Button>\r\n                                    </Grid>\r\n                                )}\r\n                                <Grid item>\r\n                                    <OutlinedInput\r\n                                        id=\"input-search-list-style1\"\r\n                                        placeholder=\"Search\"\r\n                                        startAdornment={\r\n                                            <InputAdornment position=\"start\">\r\n                                                <IconSearch stroke={1.5} size=\"1rem\" />\r\n                                            </InputAdornment>\r\n                                        }\r\n                                        size=\"small\"\r\n                                        onChange={handleSearch}\r\n                                        autoComplete=\"off\"\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                }\r\n                content={true}\r\n            >\r\n                {filterOpen ? (\r\n                    <Transitions type=\"grow\" in={filterOpen} position=\"top-left\" direction=\"up\">\r\n                        <MainCard\r\n                            content={false}\r\n                            sx={{\r\n                                padding: '20px',\r\n                                background: theme.palette.mode === 'dark' ? theme.palette.dark.main : theme.palette.primary.light\r\n                            }}\r\n                        >\r\n                            <Grid container spacing={gridSpacing}>\r\n                                <Grid item md={3} xs={12}>\r\n                                    <LocalizationProvider\r\n                                        dateAdapter={AdapterMoment}\r\n                                        localeText={{ start: 'Start Date', end: 'From Date' }}\r\n                                    >\r\n                                        <DesktopDatePicker\r\n                                            id=\"from_date\"\r\n                                            name=\"from_date\"\r\n                                            label=\"From date\"\r\n                                            maxDate={moment()}\r\n                                            inputFormat=\"YYYY-MM-DD\"\r\n                                            value={filter.filterFromDate}\r\n                                            onChange={(newValue) => {\r\n                                                handleFilter('filterFromDate', moment(newValue).format('YYYY-MM-DD'));\r\n                                            }}\r\n                                            renderInput={(params) => <TextField fullWidth size=\"small\" {...params} />}\r\n                                        />\r\n                                    </LocalizationProvider>\r\n                                </Grid>\r\n                                <Grid item md={3} xs={12}>\r\n                                    <LocalizationProvider\r\n                                        dateAdapter={AdapterMoment}\r\n                                        localeText={{ start: 'Start Date', end: 'From Date' }}\r\n                                    >\r\n                                        <DesktopDatePicker\r\n                                            id=\"to_date\"\r\n                                            name=\"to_date\"\r\n                                            label=\"To date\"\r\n                                            inputFormat=\"YYYY-MM-DD\"\r\n                                            minDate={moment(filter.filterFromDate)}\r\n                                            value={filter.filterToDate}\r\n                                            onChange={(newValue) => {\r\n                                                handleFilter('filterToDate', moment(newValue).format('YYYY-MM-DD'));\r\n                                            }}\r\n                                            disabled={!filter.filterFromDate}\r\n                                            required\r\n                                            renderInput={(params) => <TextField fullWidth size=\"small\" {...params} />}\r\n                                        />\r\n                                    </LocalizationProvider>\r\n                                </Grid>\r\n                                <Grid item md={3} xs={12}>\r\n                                    <TextField\r\n                                        size=\"small\"\r\n                                        label=\"Client\"\r\n                                        fullWidth\r\n                                        id=\"filterClientID\"\r\n                                        select\r\n                                        value={filter.filterClientID}\r\n                                        onChange={(e) => handleFilter('filterClientID', e.target.value)}\r\n                                    >\r\n                                        <MenuItem key={-1} value=\"0\">\r\n                                            All\r\n                                        </MenuItem>\r\n                                        {initData?.clientList.map((val, idx) => (\r\n                                            <MenuItem key={idx} value={val.id}>\r\n                                                {val.client_name} - {val.company_name}\r\n                                            </MenuItem>\r\n                                        ))}\r\n                                    </TextField>\r\n                                </Grid>\r\n                                <Grid item md={3} xs={12}>\r\n                                    <TextField\r\n                                        size=\"small\"\r\n                                        label=\"Status\"\r\n                                        fullWidth\r\n                                        id=\"filterStatus\"\r\n                                        select\r\n                                        value={filter.filterStatus}\r\n                                        onChange={(e) => handleFilter('filterStatus', e.target.value)}\r\n                                    >\r\n                                        <MenuItem key={-1} value=\"0\">\r\n                                            All\r\n                                        </MenuItem>\r\n                                        {initData?.paymentStatus.map((val, idx) => (\r\n                                            <MenuItem key={idx} value={val}>\r\n                                                {val}\r\n                                            </MenuItem>\r\n                                        ))}\r\n                                    </TextField>\r\n                                </Grid>\r\n                                {JSON.stringify(filter) !== JSON.stringify(initialFilter) ? (\r\n                                    <Grid item>\r\n                                        <Button variant=\"outlined\" color=\"primary\" onClick={() => handleFilter('reset', undefined)}>\r\n                                            Clear All\r\n                                        </Button>\r\n                                    </Grid>\r\n                                ) : null}\r\n                            </Grid>\r\n                        </MainCard>\r\n                    </Transitions>\r\n                ) : null}\r\n\r\n                <InvoiceList\r\n                    search={search}\r\n                    callApi={callApi}\r\n                    initData={initData}\r\n                    filter={filter}\r\n                    setIsLoading={setIsLoading}\r\n                    setWidgets={setWidgets}\r\n                />\r\n            </MainCard>\r\n\r\n            {openAdd && (\r\n                <CommonDialog\r\n                    open={openAdd}\r\n                    title=\"Add Invoice\"\r\n                    onClose={() => setOpenAdd((prevState) => !prevState)}\r\n                    id=\"addInvoice\"\r\n                    sx={{\r\n                        '& .MuiDialog-container ': {\r\n                            justifyContent: 'flex-end',\r\n                            '& .MuiPaper-root': {\r\n                                m: 0,\r\n                                p: 0,\r\n                                borderRadius: '0px',\r\n                                minWidth: { sm: '70%', xs: '100%' },\r\n                                minHeight: '100%'\r\n                            }\r\n                        }\r\n                    }}\r\n                >\r\n                    <AddEditInvoice value={invoiceInitData} formId=\"addInvoice\" onSubmit={submitHandler} />\r\n                </CommonDialog>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Index;\r\n","import propTypes from 'prop-types';\r\nimport { Button, Dialog, DialogActions, DialogTitle } from '@mui/material';\r\n\r\nconst DeleteDialog = ({ onDeleteHandler, onClose, open, dept, title, name }) => {\r\n    const handleClose = () => {\r\n        onClose();\r\n    };\r\n    const handleOk = () => {\r\n        onDeleteHandler();\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Dialog\r\n                open={open}\r\n                onClose={handleClose}\r\n                aria-labelledby=\"alert-dialog-title\"\r\n                aria-describedby=\"alert-dialog-description\"\r\n                sx={{ p: 3 }}\r\n            >\r\n                <DialogTitle id=\"alert-dialog-title\">\r\n                    Are you sure you want to delete the\r\n                    <strong>\r\n                        {' '}\r\n                        {dept} {title} {name}\r\n                    </strong>\r\n                    ? Click <strong>Yes, Delete</strong> to proceed or <strong>Cancel</strong> to cancel this action.\r\n                </DialogTitle>\r\n                <DialogActions sx={{ pr: 2.5 }}>\r\n                    <Button variant=\"contained\" onClick={handleOk}>\r\n                        Yes, Delete{' '}\r\n                    </Button>\r\n                    <Button variant=\"text\" color=\"error\" onClick={handleClose}>\r\n                        Cancel\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n};\r\n\r\nDeleteDialog.propTypes = {\r\n    onDeleteHandler: propTypes.func.isRequired,\r\n    onClose: propTypes.func.isRequired,\r\n    open: propTypes.bool.isRequired,\r\n    dept: propTypes.string.isRequired,\r\n    title: propTypes.string,\r\n    name: propTypes.string\r\n};\r\n\r\nexport default DeleteDialog;\r\n","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.9959.9959 0 0 0-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z\"\n}), 'Edit');","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M4.25 5.61C6.27 8.2 10 13 10 13v6c0 .55.45 1 1 1h2c.55 0 1-.45 1-1v-6s3.72-4.8 5.74-7.39c.51-.66.04-1.61-.79-1.61H5.04c-.83 0-1.3.95-.79 1.61z\"\n}), 'FilterAlt');","import PropTypes from 'prop-types';\nimport createBox from '../createBox';\nconst Box = createBox();\nprocess.env.NODE_ENV !== \"production\" ? Box.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default Box;"],"names":["validationSchema","yup","shape","item_type","required","item_resource_name","item_qty","initFormValue","isDate","item_start_date","moment","format","item_end_date","item_actual_days","item_working_days","item_rate","item_deduction","item_tax_amount","item_discount","item_discount_amount","item_subtotal","item_amount","AddEditItem","value","formId","onSubmit","initData","setItemData","itemData","listingData","initValue","setIsDate","useState","totalTaxSum","totalTax","tax_id","map","i","rate","formik","useFormik","initialValues","index","id","bifurcated_client","item_description","values","changeAmount","useCallback","qty","actualDays","workingDays","deduction","discount","totalWorkingDayAmount","subtotal","totalAmount","discountType","discount_type","discountAmount","Number","toFixed","setFieldValue","itemTypeId","invoiceItemTypeList","findIndex","itemType","description","item_type_name","changeTypeHandler","is_date","startDate","endDate","add","date_no","date_type","subtract","start_Date","diff","counter","date","check","day","changeDateHandler","filedName","checkChangeDate","useEffect","handleSubmit","Grid","container","spacing","item","xs","alignItems","is_bifurcated","sm","FormControl","size","fullWidth","error","touched","Boolean","errors","InputLabel","Select","labelId","name","label","onChange","e","handleChange","getIndex","bifurcatedClientList","target","selectedClient","client_name","idx","MenuItem","company_name","FormHelperText","TextField","Required","title","helperText","LocalizationProvider","dateAdapter","AdapterMoment","DesktopDatePicker","inputFormat","maxDate","itemTypeID","renderInput","params","minDate","type","disabled","multiline","rows","createSvgIcon","_jsx","d","client_id","invoice_number","invoice_date","invoice_due_date","invoice_currency_id","ccr","RateParams","currency_id","company_id","initInvoice","invoice","initTaxes","invoiceTaxes","initBanks","invoiceBanks","initItems","invoiceItems","company","useAuth","openItem","setOpenItem","openEditItem","setOpenEditItem","callFunction","setCallFunction","itemRowData","setItemRowData","fieldSum","setFieldSum","totalDeduction","totalDiscount","subTotal","grandTotal","total_tax_amount","total_discount","invoice_currency_total_amount","array","obj","actual_days","total_amount","discount_amount","end_date","resource_quantity","resource_name","start_date","tax_amount","item_type_id","working_days","push","filterData","taxList","filter","a","some","b","filterDataBank","bankList","company_bank_id","invoice_no","is_display_company_amount","bank_id","invoice_note","currency_conversion_rate","company_amount","company_currency_total_amount","subscriber_ccr","subscriber_currency_conversion_rate","subscriber_currency_amount","subscriber_currency_total_amount","USD_ccr","USD_currency_conversion_rate","USD_currency_amount","USD_currency_total_amount","invoice_item","payment_term_id","term_id","formType","subscriber_currency_id","total_tax","total_deduction","grand_total","InvoiceAddUpdateApi","then","res","data","status","apiSuccessSnackBar","apiValidationSnackBar","catch","err","apiErrorSnackBar","useMemo","Box","Autocomplete","disableClearable","options","clientList","getOptionLabel","option","renderOption","props","_","v","length","InvoiceCurrencyApi","rates","company_ccr","handleCurrencyRate","currencyList","currency_symbol","currency_name","multiple","tax_name","is_percentage","selected","Checkbox","checked","val","prevState","taxHandler","paymentTerms","bank_detail_name","justifyContent","Typography","variant","align","Link","underline","onClick","sx","cursor","TableContainer","Table","TableHead","TableRow","TableCell","TableBody","IconButton","color","component","editItemHandler","row","EditOutlined","fontSize","idxData","prev","copyItemHandler","ContentCopyOutlined","deleteItemHandler","splice","DeleteOutline","colSpan","textAlign","CenterDialog","open","onClose","minWidth","md","Card","p","List","py","ListItem","disableGutters","ListItemAvatar","Skeleton","width","height","ListItemText","primary","secondary","CardWrapper","styled","MainCard","theme","backgroundColor","palette","dark","light","overflow","position","content","background","borderRadius","top","right","isLoading","count","amount","handleFilter","useTheme","border","Avatar","typography","commonAvatar","largeAvatar","TableChartOutlined","mt","mb","getTableFooterUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","TableFooterRoot","overridesResolver","styles","root","display","tablelvl2","defaultComponent","React","inProps","ref","useThemeProps","className","other","_objectWithoutPropertiesLoose","ownerState","_extends","classes","composeClasses","useUtilityClasses","Tablelvl2Context","children","as","clsx","role","invoice_status","ref_no","payment_date","way_of_payment","invoiceCurrencyAmount","companyCurrencyAmount","tds","difference","companyAmount","invoiceData","currencyRateData","currencyRate","invoice_id","reference_no","payment_source_id","remainingAmount","remaining_amount","invoice_currency_amount","company_currency_amount","difference_amount","note","resetForm","AddEditPaymentApi","getDifference","totalDifference","tableCellClasses","borderBottom","invoice_ccr","net_amount_invoice","net_amount_company","tax_invoice","tax_company","total_amount_invoice","total_amount_company","remaining_amount_invoice","remaining_amount_company","invoiceStatusHandler","filed_labels","invoice_amount","sub_ccr","payment_source_name","search","displayLength","displayStart","orderDir","orderColumn","recordsTotal","invoiceID","callApi","setData","page","setPage","rowsPerPage","setRowsPerPage","order","setOrder","orderBy","setOrderBy","openEdit","setOpenEdit","openDelete","setOpenDelete","paymentData","setPaymentData","setInvoiceData","getData","PaymentListApi","totalCount","toUpperCase","editData","InitPaymentApi","Edit","TablePagination","rowsPerPageOptions","onPageChange","event","newPage","onRowsPerPageChange","parseInt","DeleteDialog","onDeleteHandler","DeletePaymentApi","dept","setSearch","openAdd","setOpenAdd","setCallApi","setCurrencyRate","gridSpacing","flexGrow","Button","currency_rate","AddCircleOutlineOutlined","mr","OutlinedInput","placeholder","startAdornment","InputAdornment","stroke","autoComplete","checkRestriction","attachmentData","setAttachmentData","documentType","setDocumentType","openAttachment","setOpenAttachment","AttachmentListApi","Tooltip","arrow","DownloadInvoiceAttachmentApi","document","createElement","href","zip","download","file_name","click","console","log","GetAppOutlined","doc_type_name","base64_document","downloadAttachment","DownloadOutlined","deleteAttachment","AttachmentDeleteApi","AddAttachment","attNo","formID","initList","TitlePopper","itemList","anchorEl","setAnchorEl","undefined","Popper","CardHeader","padding","CardContent","is_due","from_date","to_date","setIsLoading","setWidgets","recall","openView","setOpenView","openInvoicePayment","setOpenInvoicePayment","paymentInvoiceData","setPaymentInvoiceData","footerData","setFooterData","openAttachmentList","setOpenAttachmentList","openPayment","setOpenPayment","iVStatusPopper","setIVStatusPopper","iVUpdateAtPopper","setIVUpdateAtPopper","InvoiceListApi","widgets","footerTotal","filterClientID","filterStatus","filterFromDate","filterToDate","invoiceStatusChip","EnhancedTableHead","onRequestSort","property","viewData","InvoiceInitApi","client_company","is_discount","company_currency_amount_received","Chip","invoicePaymentData","has_payment","onMouseEnter","currentTarget","onMouseLeave","attachmentsHandler","has_attachment","last_attachment_date","DuplicateInvoiceApi","duplicateInvoice","deleteData","invoiceDownload","DownloadInvoiceApi","invoice_name","SimCardDownloadOutlined","total","received_amount","payment_list","attached_list","CommonDialog","saveButton","m","minHeight","ViewInvoice","InvoiceDeleteApi","createSortHandler","TableSortLabel","active","direction","initialFilter","filterInvoiceAmount","checkCompany","setInitData","invoiceInitData","setInvoiceInitData","filterOpen","setFilterOpen","setFilter","startTransition","useTransition","key","newString","lg","TotalInvoiceCount","TotalInvoiceAmount","TotalPartialCount","TotalPartialAmount","TotalOverDueCount","TotalOverDueAmount","TotalUnPaidCount","TotalUnPaidAmount","TotalPaidCount","TotalPaidAmount","TotalBadDeptCount","TotalBadDeptAmount","ButtonBase","disableRipple","JSON","stringify","FilterAlt","fontWeight","Transitions","in","mode","main","localeText","start","end","newValue","select","paymentStatus","handleClose","pr","createBox"],"sourceRoot":""}